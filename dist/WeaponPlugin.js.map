{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap a98f8ebfdf2be11a4972","webpack:///./consts.js","webpack:///./Bullet.js","webpack:///./main.js","webpack:///./Weapon.js","webpack:///./validateConfig.js"],"names":["KILL_NEVER","KILL_LIFESPAN","KILL_DISTANCE","KILL_WEAPON_BOUNDS","KILL_CAMERA_BOUNDS","KILL_WORLD_BOUNDS","KILL_STATIC_BOUNDS","ANGLE_UP","ANGLE_DOWN","ANGLE_LEFT","ANGLE_RIGHT","ANGLE_NORTH_EAST","ANGLE_NORTH_WEST","ANGLE_SOUTH_EAST","ANGLE_SOUTH_WEST","BULLET_FRAME_STABLE","BULLET_FRAME_CYCLE","BULLET_FRAME_RANDOM","bulletID","Bullet","scene","x","y","key","frame","physics","add","existing","setDataEnabled","setData","timeEvent","bulletManager","fromX","fromY","bodyDirty","rotateToVelocity","killType","killDistance","bodyBounds","Phaser","Geom","Rectangle","setActive","setVisible","body","enable","reset","debugShowBody","getData","debugPhysics","debugShowVelocity","stop","destroy","eventEmitter","emit","active","Math","Vector2","distance","kill","Intersects","RectangleToRectangle","bulletBounds","getBounds","rotation","velocity","atan","bulletWorldWrap","world","wrap","bulletWorldWrapPadding","GameObjects","Sprite","WeaponPlugin","pluginManager","weapons","registerGameObject","bind","config","bulletLimit","group","weaponClass","weapon","push","systems","events","on","postRender","update","forEach","game","Plugins","ScenePlugin","Weapon","consts","_bullets","_autoExpandBulletsGroup","_autofire","_shots","_fireLimit","_fireRate","_fireRateVariance","_fireFrom","_fireAngle","_bulletInheritSpriteSpeed","_bulletAnimation","_bulletFrameRandom","_bulletFrameCycle","_bulletWorldWrap","_bulletWorldWrapPadding","_bulletAngleOffset","_bulletAngleVariance","_bulletSpeed","_bulletSpeedVariance","_bulletLifespan","_bulletKillDistance","_bulletGravity","_bulletRotateToVelocity","_bulletKey","_bulletFrame","_bulletClass","_bulletCollideWorldBounds","_bulletKillType","_data","customBody","width","height","offsetX","offsetY","_bounds","_bulletBounds","bounds","_bulletFrames","_bulletFrameIndex","anims","_trackedSprite","_trackedPointer","_multiFire","_hasFired","_trackRotation","_trackOffset","_nextFire","_tempNextFire","_rotatedPoint","logLevel","Events","EventEmitter","validateConfig","createBullets","quantity","bulletClass","bullets","classType","maxSize","runChildUpdate","autoExpandBulletsGroup","createMultiple","repeat","visible","children","each","child","bulletKey","bulletFrame","addMultiple","entries","callback","callbackContext","extraArgs","arguments","call","paused","newLimit","shots","undefined","fireLimit","sprite","trackRotation","trackedPointer","trackedSprite","trackOffset","set","pointer","input","activePointer","positions","from","multiFire","offset","fire","position","time","now","speed","bulletSpeed","bulletSpeedVariance","Between","updateFireFrom","RotateAround","bulletInheritSpriteSpeed","fireFrom","randomX","random","randomY","angle","fireAngle","RadToDeg","atan2","bulletAngleVariance","moveX","moveY","cos","DegToRad","sin","bullet","getFirstDead","prepare","bulletKillType","bulletKillDistance","bulletRotateToVelocity","addEvent","delay","bulletLifespan","callbackScope","lifespan","bulletAngleOffset","bulletAnimation","play","bulletFrameCycle","bulletFrameIndex","bulletFrames","length","setTexture","bulletFrameRandom","nextFrame","floor","setSize","setOffset","collideWorldBounds","bulletCollideWorldBounds","setVelocity","setGravity","bulletGravity","next","rate","fireRate","fireRateVariance","CenterOn","min","max","selectionMethod","log","Utils","Array","NumberArray","name","frames","frameRate","loop","sys","contains","create","updateTransform","autofire","value","type","cameras","main","text","console","warn","Error","property","includes"],"mappings":"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","file":"WeaponPlugin.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WeaponPlugin\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WeaponPlugin\"] = factory();\n\telse\n\t\troot[\"WeaponPlugin\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a98f8ebfdf2be11a4972","export default {\n  /**\n   * A {@link #bulletKillType} constant that stops the bullets from ever being destroyed automatically.\n   * @constant\n   * @type {integer}\n   */\n  KILL_NEVER: 0,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when their {@link #bulletLifespan} expires.\n   * @constant\n   * @type {integer}\n   */\n  KILL_LIFESPAN: 1,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets after they\n   * exceed the {@link #bulletDistance} from their original firing position.\n   * @constant\n   * @type {integer}\n   */\n  KILL_DISTANCE: 2,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link #bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_WEAPON_BOUNDS: 3,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link Phaser.Camera#bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_CAMERA_BOUNDS: 4,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link Phaser.World#bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_WORLD_BOUNDS: 5,\n\n  /**\n   * A {@link #bulletKillType} constant that automatically kills the bullets\n   * when they leave the {@link #bounds} rectangle.\n   * @constant\n   * @type {integer}\n   */\n  KILL_STATIC_BOUNDS: 6,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face up.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_UP: 270,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face down.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_DOWN: 90,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face left.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_LEFT: 180,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face right.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_RIGHT: 0,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north east.\n   * @constant Phaser.ANGLE_NORTH_EAST\n   * @type {integer}\n   */\n  ANGLE_NORTH_EAST: 315,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north west.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_NORTH_WEST: 225,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south east.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_SOUTH_EAST: 45,\n\n  /**\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south west.\n   * @constant\n   * @type {integer}\n   */\n  ANGLE_SOUTH_WEST: 135,\n\n  /**\n   * When selecting a bullet frame the same frame should always be used. This\n   * is the default value.\n   * @constant\n   * @type { integer }\n   */\n  BULLET_FRAME_STABLE: 0,\n\n  /**\n   * When selecting a bullet frame the next frame should be used\n   * @constant\n   * @type { integer }\n   */\n  BULLET_FRAME_CYCLE: 1,\n\n  /**\n   * When selecting a bullet frame a random frame should be used.\n   * @constant\n   * @type { integer }\n   */\n  BULLET_FRAME_RANDOM: 2,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./consts.js","import consts from './consts';\n\nlet bulletID = 0;\n\nclass Bullet extends Phaser.GameObjects.Sprite {\n  /**\n   * Create a new `Bullet` object. Bullets are used by the `Weapon` class, and are normal Sprites,\n   * with a few extra properties in the data manager to handle Weapon specific features.\n   *\n   * @param {Phaser.Scene} scene - A reference to the currently running scene.\n   * @param {number} x - The x coordinate (in world space) to position the Particle at.\n   * @param {number} y - The y coordinate (in world space) to position the Particle at.\n   * @param {string} key - This is the image or texture used by the Particle during rendering.\n   * It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.\n   * @param {string|number} frame - If this Particle is using part of a sprite sheet or texture atlas\n   * you can specify the exact frame to use by giving a string or numeric index.\n   */\n  constructor(scene, x, y, key, frame) {\n    super(scene, x, y, key, frame);\n    this.bulletID = bulletID;\n    bulletID++;\n    this.scene.physics.add.existing(this);\n\n    this.setDataEnabled();\n\n    this.setData({\n      timeEvent: null,\n      bulletManager: null,\n      fromX: 0,\n      fromY: 0,\n      bodyDirty: true,\n      rotateToVelocity: false,\n      killType: 0,\n      killDistance: 0,\n      bodyBounds: new Phaser.Geom.Rectangle(),\n    });\n  }\n\n  /**\n   * Prepares this bullet to be fired and interact with the rest of the scene\n   * again.\n   * @returns {void}\n   */\n  prepare(x, y) {\n    this.setActive(true);\n    this.setVisible(true);\n    this.body.enable = true;\n    this.body.reset(x, y);\n    this.body.debugShowBody = this.getData('bulletManager').debugPhysics;\n    this.body.debugShowVelocity = this.getData('bulletManager').debugPhysics;\n  }\n\n  /**\n   * Kills the Bullet, freeing it up for re-use by the Weapon bullet pool.\n   * Also dispatches the `Weapon`s kill signal.\n   * @returns {Bullet} This instance of the bullet class\n   */\n  kill() {\n    // Reproduce Phaser.Physics.Arcade.Components.Enable.disableBody because\n    // we can't assume that the bullet class has it built in.\n    this.body.stop();\n    this.body.enable = false;\n    this.setActive(false);\n    this.setVisible(false);\n    this.body.debugShowBody = false;\n    this.body.debugShowVelocity = false;\n\n    // TODO: potentially we don't need to destroy the time event and we can\n    // just pause when the bullet is killed and restart it when it's refired.\n    // For now though do the simple thing and discard it.\n    // Another option would be to use Date.now() and manually process pause\n    // events with a flag and some math.\n    // Both of those are probably premature optimizations.\n    if (this.getData('timeEvent') !== null) {\n      this.getData('timeEvent').destroy();\n      this.setData('timeEvent', null);\n    }\n\n    this.getData('bulletManager').eventEmitter.emit('kill', this);\n\n    return this;\n  }\n\n  /**\n   * Updates the Bullet, killing as required.\n   * @returns {Bullet} This instance of the bullet class\n   */\n  update() {\n    if (!this.active) {\n      // this was previously a check to this.exists\n      return;\n    }\n\n    if (this.getData('killType') > consts.KILL_LIFESPAN) {\n      if (this.getData('killType') === consts.KILL_DISTANCE) {\n        if (\n          new Phaser.Math.Vector2(this.getData('fromX'), this.getData('fromY')).distance(this) >\n          this.getData('killDistance')\n        ) {\n          this.kill();\n        }\n      } else if (\n        !Phaser.Geom.Intersects.RectangleToRectangle(\n          this.getData('bulletManager').bulletBounds,\n          this.body.getBounds(this.getData('bodyBounds'))\n        )\n      ) {\n        this.kill();\n      }\n    }\n\n    if (this.getData('rotateToVelocity')) {\n      this.rotation = this.body.velocity.atan();\n    }\n\n    if (this.getData('bulletManager').bulletWorldWrap) {\n      this.scene.physics.world.wrap(this, this.getData('bulletManager').bulletWorldWrapPadding);\n    }\n  }\n}\n\nexport default Bullet;\n\n\n\n// WEBPACK FOOTER //\n// ./Bullet.js","/**\n * @author       Patrick Sletvold\n * @author       jdotr <https://github.com/jdotrjs>\n * @author       Richard Davey\n * @license      {@link https://github.com/16patsle/phaser3-weapon-plugin/blob/master/LICENSE|MIT License}\n */\nimport Weapon from './Weapon';\nimport Bullet from './Bullet';\nimport consts from './consts';\n\n/**\n * The Weapon Plugin provides the ability to easily create a bullet pool\n * and manager.\n *\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\n * not currently work with Impact or Matter Physics.\n *\n * The Bullets are created inside of {@link #bullets weapon.bullets}, which is\n * a {@link Phaser.GameObjects.Group} instance. Anything you can usually do\n * with a Group, like iterate it, etc can be done to the bullets Group too.\n *\n * Bullets can have textures and even animations. You can control the speed at\n * which they are fired, the firing rate, the firing angle, and even set things\n * like gravity for them.\n *\n * A small example, using add.weapon, assumed to be running from within a\n * {@link Phaser.Scene#create} method:\n *\n * ```javascript\n * var weapon = this.add.weapon(10, 'bullet');\n * weapon.fireFrom.setPosition(300, 300);\n * this.input.on('pointerdown', weapon.fire, this);\n * ```\n */\nclass WeaponPlugin extends Phaser.Plugins.ScenePlugin {\n  /**\n   * @param {Phaser.Scene} scene - A reference to the Phaser.Scene instance.\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the\n   *  Phaser.Plugins.PluginManager instance.\n   */\n  constructor(scene, pluginManager) {\n    super(scene, pluginManager);\n\n    this.weapons = [];\n\n    // Register our new Game Object type\n    pluginManager.registerGameObject('weapon', this.add.bind(this), config => {\n      return this.add(config.bulletLimit, config.key, config.frame, config.group, config.weaponClass);\n    });\n  }\n\n  add(bulletLimit, key, frame, group, weaponClass) {\n    if (!weaponClass) {\n      weaponClass = Weapon;\n    }\n    const weapon = new weaponClass(this.scene, bulletLimit, key, frame, group);\n\n    this.weapons.push(weapon);\n\n    return weapon;\n  }\n\n  /**\n   * Called by the PluginManager when this plugin is started.\n   * If a plugin is stopped, and then started again, this will get called again.\n   * Typically called immediately after `BasePlugin.init`.\n   *\n   * @returns {void}\n   */\n  start() {\n    this.systems.events.on('postrender', this.postRender, this);\n  }\n\n  /**\n   * If this is a Scene Plugin (i.e. installed into a Scene) then this method is called when the Scene boots.\n   * By this point the plugin properties `scene` and `systems` will have already been set.\n   * In here you can listen for Scene events and set-up whatever you need for this plugin to run.\n   * @returns {void}\n   */\n  boot() {\n    const eventEmitter = this.systems.events;\n\n    eventEmitter.on('update', this.update, this);\n    eventEmitter.on('destroy', this.destroy, this);\n  }\n\n  /**\n   * Internal update method, called by the PluginManager.\n   *\n   * @protected\n   * @returns {void}\n   */\n  update() {\n    this.weapons.forEach(weapon => {\n      weapon.update();\n    });\n  }\n\n  /**\n   * Internal update method, called by the PluginManager.\n   *\n   * @protected\n   * @returns {void}\n   */\n  postRender() {\n    this.weapons.forEach(weapon => {\n      weapon.postRender();\n    });\n  }\n\n  /**\n   * Destroys this Weapon.\n   * You must release everything in here, all references, all objects, free it all up.\n   * @returns {void}\n   */\n  destroy() {\n    this.pluginManager = null;\n    this.game = null;\n    this.scene = null;\n    this.systems = null;\n  }\n}\n\n// Set up shortcuts to the classes and constants\nWeaponPlugin.Weapon = Weapon;\nWeaponPlugin.Bullet = Bullet;\nWeaponPlugin.consts = consts;\n\n\nexport default WeaponPlugin;\n\n\n\n// WEBPACK FOOTER //\n// ./main.js","import Bullet from './Bullet';\nimport consts from './consts';\nimport validateConfig, { log } from './validateConfig';\n\n/**\n * The Weapon provides the ability to easily create a bullet pool and manager.\n *\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\n * not currently work with Impact or Matter Physics.\n *\n * The Bullets are created inside of {@link #bullets weapon.bullets}, which is\n * a {@link Phaser.GameObjects.Group} instance. Anything you can usually do\n * with a Group, like iterate it, etc can be done to the bullets Group too.\n *\n * Bullets can have textures and even animations. You can control the speed at\n * which they are fired, the firing rate, the firing angle, and even set things\n * like gravity for them.\n *\n * A small example, using add.weapon, assumed to be running from within a\n * {@link Phaser.Scene#create} method:\n *\n * ```javascript\n * var weapon = this.add.weapon(10, 'bullet');\n * weapon.fireFrom.setPosition(300, 300);\n * this.input.on('pointerdown', weapon.fire, this);\n * ```\n */\nclass Weapon {\n  /**\n   * TODO: a builder style interface would be neat. Can be kicked way forward\n   * into polishing.\n   * @param {Phaser.Scene} scene - A reference to the Phaser.Scene instance.\n   * @param {number} bulletLimit - The number of bullets to create.\n   * @param {String} key - The texture key for the bullet.\n   * @param {String} frame - The frame name for the bullet.\n   * @param {Phaser.GameObjects.Group} group - A group to add the bullets to.\n   */\n  constructor(scene, bulletLimit, key, frame, group) {\n    this.scene = scene;\n\n    this.debugPhysics = null;\n\n    /**\n     * Private var that holds the public `bullets` property.\n     * @type {Phaser.GameObjects.Group}\n     * @private\n     */\n    this._bullets = null;\n\n    /**\n     * Private var that holds the public `autoExpandBulletsGroup` property.\n     * @type {boolean}\n     * @private\n     */\n    this._autoExpandBulletsGroup = false;\n\n    /**\n     * Private var that holds the public `autofire` property.\n     * @type {boolean}\n     * @private\n     */\n    this._autofire = false;\n\n    /**\n     * Private var that holds the public `shots` property.\n     * @type {number}\n     * @private\n     */\n    this._shots = 0;\n\n    /**\n     * Private var that holds the public `fireLimit` property.\n     * @type {number}\n     * @private\n     */\n    this._fireLimit = 0;\n\n    /**\n     * Private var that holds the public `fireRate` property.\n     * @type {number}\n     * @private\n     */\n    this._fireRate = 100;\n\n    /**\n     * Private var that holds the public `fireRateVariance` property.\n     * @type {number}\n     * @private\n     */\n    this._fireRateVariance = 0;\n\n    /**\n     * Private var that holds the public `fireFrom` property.\n     * @type {Phaser.Geom.Rectangle}\n     * @private\n     */\n    this._fireFrom = new Phaser.Geom.Rectangle(0, 0, 1, 1);\n\n    /**\n     * Private var that holds the public `fireAngle` property.\n     * @type {integer}\n     * @private\n     */\n    this._fireAngle = consts.ANGLE_UP;\n\n    /**\n     * Private var that holds the public `bulletInheritSpriteSpeed` property.\n     * @type {boolean}\n     * @private\n     */\n    this._bulletInheritSpriteSpeed = false;\n\n    /**\n     * Private var that holds the public `bulletAnimation` property.\n     * @type {string}\n     * @private\n     */\n    this._bulletAnimation = '';\n\n    /**\n     * Private var that holds the public `bulletFrameRandom` property.\n     * @type {boolean}\n     * @private\n     */\n    this._bulletFrameRandom = false;\n\n    /**\n     * Private var that holds the public `bulletFrameCycle` property.\n     * @type {boolean}\n     * @private\n     */\n    this._bulletFrameCycle = false;\n\n    /**\n     * Private var that holds the public `bulletWorldWrap` property.\n     * @type {boolean}\n     * @private\n     */\n    this._bulletWorldWrap = false;\n\n    /**\n     * Private var that holds the public `bulletWorldWrapPadding` property.\n     * @type {integer}\n     * @private\n     */\n    this._bulletWorldWrapPadding = 0;\n\n    /**\n     * Private var that holds the public `bulletAngleOffset` property.\n     * @type {number}\n     * @private\n     */\n    this._bulletAngleOffset = 0;\n\n    /**\n     * Private var that holds the public `bulletAngleVariance` property.\n     * @type {number}\n     * @private\n     */\n    this._bulletAngleVariance = 0;\n\n    /**\n     * Private var that holds the public `bulletSpeed` property.\n     * @type {number}\n     * @private\n     */\n    this._bulletSpeed = 200;\n\n    /**\n     * Private var that holds the public `bulletSpeedVariance` property.\n     * @type {number}\n     * @private\n     */\n    this._bulletSpeedVariance = 0;\n\n    /**\n     * Private var that holds the public `bulletLifespan` property.\n     * @type {number}\n     * @private\n     */\n    this._bulletLifespan = 0;\n\n    /**\n     * Private var that holds the public `bulletKillDistance` property.\n     * @type {number}\n     * @private\n     */\n    this._bulletKillDistance = 0;\n\n    /**\n     * Private var that holds the public `bulletGravity` property.\n     * @type {Phaser.Math.Vector2}\n     * @private\n     */\n    this._bulletGravity = new Phaser.Math.Vector2(0, 0);\n\n    /**\n     * Private var that holds the public `bulletRotateToVelocity` property.\n     * @type {boolean}\n     * @private\n     */\n    this._bulletRotateToVelocity = false;\n\n    /**\n     * Private var that holds the public `bulletKey` property.\n     * @type {string}\n     * @private\n     */\n    this._bulletKey = key || '';\n\n    /**\n     * Private var that holds the public `bulletFrame` property.\n     * @type {string|integer}\n     * @private\n     */\n    this._bulletFrame = frame || '';\n\n    /**\n     * Private var that holds the public `bulletClass` property.\n     * @type {function}\n     * @private\n     */\n    this._bulletClass = Bullet;\n\n    /**\n     * Private var that holds the public `bulletCollideWorldBounds` property.\n     * @type {boolean}\n     * @private\n     */\n    this._bulletCollideWorldBounds = false;\n\n    /**\n     * Private var that holds the public `bulletKillType` property.\n     * @type {integer}\n     * @private\n     */\n    this._bulletKillType = consts.KILL_WORLD_BOUNDS;\n\n    /**\n     * Holds internal data about custom bullet body sizes.\n     *\n     * @type {Object}\n     * @private\n     */\n    this._data = {\n      customBody: false,\n      width: 0,\n      height: 0,\n      offsetX: 0,\n      offsetY: 0,\n    };\n\n    /**\n     * Private var that holds the public `bounds` property.\n     * @type {Phaser.Geom.Rectangle}\n     * @private\n     */\n    this._bounds = new Phaser.Geom.Rectangle();\n\n    /**\n     * Private var that holds the public `bulletBounds` property.\n     * @type {Phaser.Geom.Rectangle}\n     * @private\n     */\n    this._bulletBounds = this.scene.physics.world.bounds;\n\n    /**\n     * This array stores the frames added via @link #setBulletFrames.\n     *\n     * @type {Array}\n     * @protected\n     */\n    this._bulletFrames = [];\n\n    /**\n     * Private var that holds the public `bulletFrameIndex` property.\n     * @type {number}\n     * @private\n     */\n    this._bulletFrameIndex = 0;\n\n    /**\n     * An internal object that stores the animation data added via {@link #addBulletAnimation}.\n     * @type {Object}\n     * @private\n     */\n    this.anims = {};\n\n    /**\n     * Private var that holds the public `trackedSprite` property.\n     * @type {Phaser.GameObjects.Sprite|Object}\n     * @private\n     */\n    this._trackedSprite = null;\n\n    /**\n     * Private var that holds the public `trackedPointer` property.\n     * @type {Phaser.Input.Pointer}\n     * @private\n     */\n    this._trackedPointer = null;\n\n    /**\n     * Private var that holds the public `multiFire` property.\n     * @type {boolean}\n     * @private\n     */\n    this._multiFire = false;\n\n    /**\n     * Internal multiFire test flag.\n     *\n     * @type {boolean}\n     * @private\n     */\n    this._hasFired = false;\n\n    /**\n     * Private var that holds the public `trackRotation` property.\n     * @type {boolean}\n     * @private\n     */\n    this._trackRotation = false;\n\n    /**\n     * Private var that holds the public `trackOffset` property.\n     * @type {Phaser.Math.Vector2}\n     * @private\n     */\n    this._trackOffset = new Phaser.Math.Vector2();\n\n    /**\n     * Internal firing rate time tracking variable.\n     *\n     * @type {number}\n     * @private\n     */\n    this._nextFire = 0;\n\n    /**\n     * Internal firing rate time tracking variable used by multiFire.\n     *\n     * @type {number}\n     * @private\n     */\n    this._tempNextFire = 0;\n\n    /**\n     * Internal firing rotation tracking point.\n     *\n     * @type {Phaser.Math.Vector2}\n     * @private\n     */\n    this._rotatedPoint = new Phaser.Math.Vector2();\n\n    /**\n     * Log level for this weapon. Either `warn`, `error' or `off`. `warn` is the default.\n     * If you change this, please do so before setting any other properties.\n     * \n     * @type {string}\n     */\n    this.logLevel = 'warn';\n\n    this.eventEmitter = new Phaser.Events.EventEmitter();\n\n    validateConfig(this);\n\n    this.createBullets(bulletLimit, key, frame, group);\n  }\n\n  /**\n   * This is the Phaser.Group that contains all of the bullets managed by this plugin.\n   * @type {Phaser.GameObjects.Group}\n   */\n  get bullets(){\n    return this._bullets;\n  }\n  set bullets(value){\n    this._bullets = value;\n\n    validateConfig(this, 'bullets');\n  }\n\n  /**\n   * Should the bullet pool run out of bullets (i.e. they are all in flight) then this\n   * boolean controls if the Group will create a brand new bullet object or not.\n   * @type {boolean}\n   * @default\n   */\n  get autoExpandBulletsGroup(){\n    return this._autoExpandBulletsGroup;\n  }\n  set autoExpandBulletsGroup(value) {\n    this._autoExpandBulletsGroup = value;\n\n    validateConfig(this, 'autoExpandBulletsGroup');\n  }\n\n  /**\n   * Will this weapon auto fire? If set to true then a new bullet will be fired\n   * based on the {@link #fireRate} value.\n   * @type {boolean}\n   * @default\n   */\n  get autofire() {\n    return this._autofire;\n  }\n  set autofire(value) {\n    this._autofire = value;\n\n    validateConfig(this, 'autofire');\n  }\n\n  /**\n * The total number of bullets this Weapon has fired so far.\n * You can limit the number of shots allowed (via {@link #fireLimit}), and reset\n * this total via {@link #resetShots}.\n * @type {number}\n * @default\n */\n  get shots() {\n    return this._shots;\n  }\n  set shots(value) {\n    this._shots = value;\n\n    validateConfig(this, 'shots');\n  }\n\n  /**\n * The maximum number of shots that this Weapon is allowed to fire before it stops.\n * When the limit is hit the {@link #onFireLimit} event is dispatched.\n * You can reset the shot counter via {@link #resetShots}.\n * @type {number}\n * @default\n */\n  get fireLimit(){\n    return this._fireLimit;\n  }\n  set fireLimit(value){\n    this._fireLimit = value;\n\n    validateConfig(this, 'fireLimit');\n  }\n\n  /**\n * The minimum interval between shots, in milliseconds.\n * @type {number}\n * @default\n */\n  get fireRate(){\n    return this._fireRate;\n  }\n  set fireRate(value){\n    this._fireRate = value;\n\n    validateConfig(this, 'fireRate');\n  }\n\n  /**\n * This is a modifier that is added to the {@link #fireRate} each update to add variety\n * to the firing rate of the Weapon. The value is given in milliseconds.\n * If you've a `fireRate` of 200 and a `fireRateVariance` of 50 then the actual\n * firing rate of the Weapon will be between 150 and 250.\n * @type {number}\n * @default\n */\n  get fireRateVariance(){\n    return this._fireRateVariance;\n  }\n  set fireRateVariance(value){\n    this._fireRateVariance = value;\n\n    validateConfig(this, 'fireRateVariance');\n  }\n\n  /**\n * This is a Rectangle from within which the bullets are fired. By default it's a 1x1\n * rectangle, the equivalent of a Point. But you can change the width and height, and if\n * larger than 1x1 it'll pick a random point within the rectangle to launch the bullet from.\n * @type {Phaser.Geom.Rectangle}\n */\n  get fireFrom(){\n    return this._fireFrom;\n  }\n  set fireFrom(value){\n    this._fireFrom = value;\n\n    validateConfig(this, 'fireFrom');\n  }\n\n  /**\n * The angle at which the bullets are fired. This can be a const such as Phaser.ANGLE_UP\n * or it can be any number from 0 to 360 inclusive, where 0 degrees is to the right.\n * @type {integer}\n * @default\n */\n  get fireAngle(){\n    return this._fireAngle;\n  }\n  set fireAngle(value){\n    this._fireAngle = value;\n\n    validateConfig(this, 'fireAngle');\n  }\n\n  /**\n * When a Bullet is fired it can optionally inherit the velocity of the `trackedSprite` if set.\n * @type {boolean}\n * @default\n */\n  get bulletInheritSpriteSpeed(){\n    return this._bulletInheritSpriteSpeed;\n  }\n  set bulletInheritSpriteSpeed(value){\n    this._bulletInheritSpriteSpeed = value;\n\n    validateConfig(this, 'bulletInheritSpriteSpeed');\n  }\n\n  /**\n * The string based name of the animation that the Bullet will be given on launch.\n * This is set via {@link #addBulletAnimation}.\n * @type {string}\n * @default\n */\n  get bulletAnimation(){\n    return this._bulletAnimation;\n  }\n  set bulletAnimation(value){\n    this._bulletAnimation = value;\n\n    validateConfig(this, 'bulletAnimation');\n  }\n\n  /**\n * If you've added a set of frames via {@link #setBulletFrames} then you can optionally\n * chose for each Bullet fired to pick a random frame from the set.\n * @type {boolean}\n * @default\n */\n  get bulletFrameRandom(){\n    return this._bulletFrameRandom;\n  }\n  set bulletFrameRandom(value){\n    this._bulletFrameRandom = value;\n\n    validateConfig(this, 'bulletFrameRandom');\n  }\n\n  /**\n * If you've added a set of frames via {@link #setBulletFrames} then you can optionally\n * chose for each Bullet fired to use the next frame in the set. The frame index is then\n * advanced one frame until it reaches the end of the set, then it starts from the start\n * again. Cycling frames like this allows you to create varied bullet effects via\n * sprite sheets.\n * @type {boolean}\n * @default\n */\n  get bulletFrameCycle(){\n    return this._bulletFrameCycle;\n  }\n  set bulletFrameCycle(value){\n    this._bulletFrameCycle = value;\n\n    validateConfig(this, 'bulletFrameCycle');\n  }\n\n  /**\n   * Should the Bullets wrap around the world bounds? This automatically calls\n   * `World.wrap` on the Bullet each frame. See the docs for that method for details.\n   * @type {boolean}\n   * @default\n   */\n  get bulletWorldWrap(){\n    return this._bulletWorldWrap;\n  }\n  set bulletWorldWrap(value){\n    this._bulletWorldWrap = value;\n\n    validateConfig(this, 'bulletWorldWrap');\n  }\n\n  /**\n * If `bulletWorldWrap` is true then you can provide an optional padding value with this\n * property. It's added to the calculations determining when the Bullet should wrap around\n * the world or not. The value is given in pixels.\n * @type {integer}\n * @default\n */\n  get bulletWorldWrapPadding(){\n    return this._bulletWorldWrapPadding;\n  }\n  set bulletWorldWrapPadding(value){\n    this._bulletWorldWrapPadding = value;\n\n    validateConfig(this, 'bulletWorldWrapPadding');\n  }\n\n  /**\n * An optional angle offset applied to the Bullets when they are launched.\n * This is useful if for example your bullet sprites have been drawn facing up, instead of\n * to the right, and you want to fire them at an angle. In which case you can set the\n * angle offset to be 90 and they'll be properly rotated when fired.\n * @type {number}\n * @default\n */\n  get bulletAngleOffset(){\n    return this._bulletAngleOffset;\n  }\n  set bulletAngleOffset(value){\n    this._bulletAngleOffset = value;\n\n    validateConfig(this, 'bulletAngleOffset');\n  }\n\n  /**\n * This is a variance added to the angle of Bullets when they are fired.\n * If you fire from an angle of 90 and have a `bulletAngleVariance` of 20 then the actual\n * angle of the Bullets will be between 70 and 110 degrees. This is a quick way to add a\n * great 'spread' effect to a Weapon.\n * @type {number}\n * @default\n */\n  get bulletAngleVariance(){\n    return this._bulletAngleVariance;\n  }\n  set bulletAngleVariance(value){\n    this._bulletAngleVariance = value;\n\n    validateConfig(this, 'bulletAngleVariance');\n  }\n\n  /**\n * The initial velocity of fired bullets, in pixels per second.\n * @type {number}\n * @default\n */\n  get bulletSpeed(){\n    return this._bulletSpeed;\n  }\n  set bulletSpeed(value){\n    this._bulletSpeed = value;\n\n    validateConfig(this, 'bulletSpeed');\n  }\n\n  /**\n * This is a variance added to the speed of Bullets when they are fired.\n * If bullets have a {@link #bulletSpeed} value of 200, and a `bulletSpeedVariance` of 50\n * then the actual speed of the Bullets will be between 150 and 250 pixels per second.\n * @type {number}\n * @default\n */\n  get bulletSpeedVariance(){\n    return this._bulletSpeedVariance;\n  }\n  set bulletSpeedVariance(value){\n    this._bulletSpeedVariance = value;\n\n    validateConfig(this, 'bulletSpeedVariance');\n  }\n\n  /**\n * If you've set {@link #bulletKillType} to `consts.KILL_LIFESPAN` this controls the amount\n * of lifespan the Bullets have set on launch. The value is given in milliseconds.\n * When a Bullet hits its lifespan limit it will be automatically killed.\n * @type {number}\n * @default\n */\n  get bulletLifespan(){\n    return this._bulletLifespan;\n  }\n  set bulletLifespan(value){\n    this._bulletLifespan = value;\n\n    validateConfig(this, 'bulletLifespan');\n  }\n\n  /**\n * If you've set {@link #bulletKillType} to `consts.KILL_DISTANCE` this controls the distance\n * the Bullet can travel before it is automatically killed. The distance is given in pixels.\n * @type {number}\n * @default\n */\n  get bulletKillDistance() {\n    return this._bulletKillDistance;\n  }\n  set bulletKillDistance(value) {\n    this._bulletKillDistance = value;\n\n    validateConfig(this, 'bulletKillDistance');\n  }\n\n  /**\n * This is the amount of {@link Phaser.Physics.Arcade.Body#gravity} added to the Bullets physics body when fired.\n * Gravity is expressed in pixels / second / second.\n * @type {Phaser.Math.Vector2}\n */\n  get bulletGravity() {\n    return this._bulletGravity;\n  }\n  set bulletGravity(value) {\n    this._bulletGravity = value;\n\n    validateConfig(this, 'bulletGravity');\n  }\n\n  /**\n * Bullets can optionally adjust their rotation in-flight to match their velocity.\n * This can create the effect of a bullet 'pointing' to the path it is following, for example\n * an arrow being fired from a bow, and works especially well when added to {@link #bulletGravity}.\n * @type {boolean}\n * @default\n */\n  get bulletRotateToVelocity() {\n    return this._bulletRotateToVelocity;\n  }\n  set bulletRotateToVelocity(value) {\n    this._bulletRotateToVelocity = value;\n\n    validateConfig(this, 'bulletRotateToVelocity');\n  }\n\n  /**\n * The Texture Key that the Bullets use when rendering.\n * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\n * @type {string}\n * @default\n */\n  get bulletKey() {\n    return this._bulletKey;\n  }\n  set bulletKey(value) {\n    this._bulletKey = value;\n\n    validateConfig(this, 'bulletKey');\n  }\n\n  /**\n * The Texture Frame that the Bullets use when rendering.\n * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\n * @type {string|integer}\n * @default\n */\n  get bulletFrame() {\n    return this._bulletFrame;\n  }\n  set bulletFrame(value) {\n    this._bulletFrame = value;\n\n    validateConfig(this, 'bulletFrame');\n  }\n\n  /**\n   * The Class of the bullets that are launched by this Weapon. Defaults to {@link Phaser.Bullet}, but can be\n   * overridden before calling `createBullets` and set to your own class type.\n   *\n   * It should be a constructor function accepting `(game, x, y, key, frame)`.\n   *\n   * @property {function} bulletClass\n  */\n  get bulletClass() {\n    return this._bulletClass;\n  }\n  set bulletClass(classType){\n    this._bulletClass = classType;\n\n    // `this.bullets` exists only after createBullets()\n    if (this.bullets) {\n      this.bullets.classType = this._bulletClass;\n    }\n\n    validateConfig(this, 'bulletClass');\n  }\n\n  /**\n * Should bullets collide with the World bounds or not?\n *\n * @property {boolean} bulletCollideWorldBounds\n*/\n  get bulletCollideWorldBounds(){\n    return this._bulletCollideWorldBounds;\n  }\n  set bulletCollideWorldBounds(value){\n    this._bulletCollideWorldBounds = value;\n\n    this.bullets.children.each(child => {\n      child.body.collideWorldBounds = value;\n      child.setData('bodyDirty', false);\n    });\n\n    validateConfig(this, 'bulletCollideWorldBounds');\n  }\n\n  /**\n * This controls how the bullets will be killed. The default is `consts.KILL_WORLD_BOUNDS`.\n *\n * There are 7 different \"kill types\" available:\n *\n * * `consts.KILL_NEVER`\n * The bullets are never destroyed by the Weapon. It's up to you to destroy them via your own code.\n *\n * * `consts.KILL_LIFESPAN`\n * The bullets are automatically killed when their `bulletLifespan` amount expires.\n *\n * * `consts.KILL_DISTANCE`\n * The bullets are automatically killed when they\n * exceed `bulletDistance` pixels away from their original launch position.\n *\n * * `consts.KILL_WEAPON_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link #bounds} rectangle.\n *\n * * `consts.KILL_CAMERA_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link Phaser.Camera#bounds} rectangle.\n *\n * * `consts.KILL_WORLD_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link Phaser.World#bounds} rectangle.\n *\n * * `consts.KILL_STATIC_BOUNDS`\n * The bullets are automatically killed when they no longer intersect with the {@link #bounds} rectangle.\n * The difference between static bounds and weapon bounds, is that a static bounds will never be adjusted to\n * match the position of a tracked sprite or pointer.\n *\n * @property {integer} bulletKillType\n*/\n  get bulletKillType(){\n    return this._bulletKillType;\n  }\n  set bulletKillType(type){\n    switch (type) {\n      case consts.KILL_STATIC_BOUNDS:\n      case consts.KILL_WEAPON_BOUNDS:\n        this.bulletBounds = this.bounds;\n        break;\n\n      case consts.KILL_CAMERA_BOUNDS:\n        this.bulletBounds = this.scene.sys.cameras.main._bounds;\n        break;\n\n      case consts.KILL_WORLD_BOUNDS:\n        this.bulletBounds = this.scene.physics.world.bounds;\n        break;\n    }\n\n    this._bulletKillType = type;\n\n    validateConfig(this, 'bulletKillType');\n  }\n\n  /**\n * This Rectangle defines the bounds that are used when determining if a Bullet should be killed or not.\n * It's used in combination with {@link #bulletKillType} when that is set to either `consts.KILL_WEAPON_BOUNDS`\n * or `consts.KILL_STATIC_BOUNDS`. If you are not using either of these kill types then the bounds are ignored.\n * If you are tracking a Sprite or Point then the bounds are centered on that object every frame.\n *\n * @type {Phaser.Geom.Rectangle}\n */\n  get bounds() {\n    return this._bounds;\n  }\n  set bounds(value) {\n    this._bounds = value;\n\n    validateConfig(this, 'bounds');\n  }\n\n  /**\n * The Rectangle used to calculate the bullet bounds from.\n *\n * @type {Phaser.Geom.Rectangle}\n * @private\n */\n  get bulletBounds() {\n    return this._bulletBounds;\n  }\n  set bulletBounds(value) {\n    this._bulletBounds = value;\n\n    validateConfig(this, 'bulletBounds');\n  }\n\n  /**\n * This array stores the frames added via @link #setBulletFrames.\n *\n * @type {Array}\n * @protected\n */\n  get bulletFrames() {\n    return this._bulletFrames;\n  }\n  set bulletFrames(value) {\n    this._bulletFrames = value;\n\n    validateConfig(this, 'bulletFrames');\n  }\n\n  /**\n * The index of the frame within {@link #bulletFrames} that is currently being used.\n * This value is only used if {@link #bulletFrameCycle} is set to `true`.\n * @type {number}\n * @private\n */\n  get bulletFrameIndex() {\n    return this._bulletFrameIndex;\n  }\n  set bulletFrameIndex(value) {\n    this._bulletFrameIndex = value;\n\n    validateConfig(this, 'bulletFrameIndex');\n  }\n\n  /**\n * The Sprite currently being tracked by the Weapon, if any.\n * This is set via the {@link #trackSprite} method.\n *\n * @type {Phaser.GameObjects.Sprite|Object}\n */\n  get trackedSprite() {\n    return this._trackedSprite;\n  }\n  set trackedSprite(value) {\n    this._trackedSprite = value;\n\n    validateConfig(this, 'trackedSprite');\n  }\n\n  /**\n * The Pointer currently being tracked by the Weapon, if any.\n * This is set via the {@link #trackPointer} method.\n *\n * @type {Phaser.Input.Pointer}\n */\n  get trackedPointer() {\n    return this._trackedPointer;\n  }\n  set trackedPointer(value) {\n    this._trackedPointer = value;\n\n    validateConfig(this, 'trackedPointer');\n  }\n\n  /**\n * If you want this Weapon to be able to fire more than 1 bullet in a single\n * update, then set this property to `true`. When `true` the Weapon plugin won't\n * set the shot / firing timers until the `postRender` phase of the game loop.\n * This means you can call `fire` (and similar methods) as often as you like in one\n * single game update.\n *\n * @type {boolean}\n * @default\n */\n  get multiFire() {\n    return this._multiFire;\n  }\n  set multiFire(value) {\n    this._multiFire = value;\n\n    validateConfig(this, 'multiFire');\n  }\n\n  /**\n * If the Weapon is tracking a Sprite, should it also track the Sprites rotation?\n * This is useful for a game such as Asteroids, where you want the weapon to fire based\n * on the sprites rotation.\n *\n * @type {boolean}\n * @default\n */\n  get trackRotation() {\n    return this._trackRotation;\n  }\n  set trackRotation(value) {\n    this._trackRotation = value;\n\n    validateConfig(this, 'trackRotation');\n  }\n\n  /**\n * The Track Offset is a Vector2 object that allows you to specify a pixel offset that bullets use\n * when launching from a tracked Sprite or Pointer. For example if you've got a bullet that is 2x2 pixels\n * in size, but you're tracking a Sprite that is 32x32, then you can set `trackOffset.x = 16` to have\n * the bullet launched from the center of the Sprite.\n *\n * @type {Phaser.Math.Vector2}\n */\n  get trackOffset() {\n    return this._trackOffset;\n  }\n  set trackOffset(value) {\n    this._trackOffset = value;\n\n    validateConfig(this, 'trackOffset');\n  }\n\n  /**\n   * The x coordinate from which bullets are fired. This is the same as `Weapon.fireFrom.x`, and\n   * can be overridden by the {@link #fire} arguments.\n   *\n   * @property {number} x\n  */\n  get x(){\n    return this.fireFrom.x;\n  }\n  set x(value){\n    this.fireFrom.x = value;\n  }\n\n  /**\n   * The y coordinate from which bullets are fired. This is the same as `Weapon.fireFrom.y`, and\n   * can be overridden by the {@link #fire} arguments.\n   *\n   * @property {number} y\n  */\n  get y(){\n    return this.fireFrom.y;\n  }\n  set y(value){\n    this.fireFrom.y = value;\n  }\n\n  /**\n   * This method performs two actions: First it will check to see if the\n   * {@link #bullets} Group exists or not, and if not it creates it, adding its\n   * children to the `group` given as the 4th argument.\n   *\n   * Then it will seed the bullet pool with the `quantity` number of Bullets,\n   * using the texture key and frame provided (if any).\n   *\n   * If for example you set the quantity to be 10, then this Weapon will only\n   * ever be able to have 10 bullets in-flight simultaneously. If you try to\n   * fire an 11th bullet then nothing will happen until one, or more, of the\n   * in-flight bullets have been killed, freeing them up for use by the Weapon\n   * again.\n   *\n   * If you do not wish to have a limit set, then pass in -1 as the quantity.\n   * In this instance the Weapon will keep increasing the size of the bullet\n   * pool as needed. It will never reduce the size of the pool however, so be\n   * careful it doesn't grow too large.\n   *\n   * You can either set the texture key and frame here, or via the\n   * {@link #bulletKey} and {@link #bulletFrame} properties. You can also\n   * animate bullets, or set them to use random frames. All Bullets belonging\n   * to a single Weapon instance must share the same texture key however.\n   *\n   * @param {integer} [quantity=1] - The quantity of bullets to seed the Weapon\n   *  with. If -1 it will set the pool to automatically expand.\n   * @param {string} [key] - The Game.cache key of the image that this Sprite\n   *  will use.\n   * @param {integer|string} [frame] - If the Sprite image contains multiple\n   *  frames you can specify which one to use here.\n   * @param {Phaser.GameObjects.Group} [group] - Optional Group to add the\n   *  object to. If not specified it will be added to the World group.\n   * @return {Weapon} This Weapon instance.\n   */\n  createBullets(quantity = 1, key, frame, group, bulletClass) {\n    if (bulletClass) {\n      this._bulletClass = bulletClass;\n    }\n\n    if (this.bullets && !this.bullets.scene) {\n      this.bullets = null;\n    }\n\n    if (!this.bullets) {\n      this.bullets = this.scene.add.group({\n        classType: this._bulletClass,\n        maxSize: quantity,\n        runChildUpdate: true,\n      });\n    }\n\n    if (quantity !== 0) {\n      if (quantity === -1) {\n        this.autoExpandBulletsGroup = true;\n        quantity = 1;\n      }\n\n      this.bullets.createMultiple({\n        key,\n        frame,\n        repeat: quantity,\n        active: false,\n        visible: false,\n      });\n\n      this.bullets.children.each(function(child) {\n        child.setData('bulletManager', this);\n      }, this);\n\n      this.bulletKey = key;\n      this.bulletFrame = frame;\n\n      if (group) {\n        group.addMultiple(this.bullets.children.entries);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Call a function on each in-flight bullet in this Weapon.\n   *\n   * See {@link Phaser.GameObjects.Group#forEachExists forEachExists} for more details.\n   *\n   * @param {function} callback - The function that will be called for each applicable child.\n   * The child will be passed as the first argument.\n   * @param {object} callbackContext - The context in which the function should be called (usually 'this').\n   * @param {...any} [args=(none)] - Additional arguments to pass to the callback function, after the child item.\n   * @return {Weapon} This Weapon instance.\n   */\n  forEach(callback, callbackContext) {\n    const extraArgs = arguments;\n\n    this.bullets.children.each(child => {\n      if (child.active) {\n        callback.call(callbackContext, child, extraArgs);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Sets {@link Phaser.Physics.Arcade.Body#enable} to `false` on each bullet in this Weapon.\n   * This has the effect of stopping them in-flight should they be moving.\n   * It also stops them being able to be checked for collision.\n   *\n   * @return {Weapon} This Weapon instance.\n   */\n  pauseAll() {\n    this.bullets.children.each(child => {\n      child.body.enable = false;\n      if (child.getData('timeEvent') !== null) {\n        child.getData('timeEvent').paused = true;\n      }\n    }, this);\n\n    return this;\n  }\n\n  /**\n   * Sets {@link Phaser.Physics.Arcade.Body#enable} to `true` on each bullet in this Weapon.\n   * This has the effect of resuming their motion should they be in-flight.\n   * It also enables them for collision checks again.\n   *\n   * @return {Weapon} This Weapon instance.\n   */\n  resumeAll() {\n    this.bullets.children.each(child => {\n      child.body.enable = true;\n      if (child.getData('timeEvent') !== null) {\n        child.getData('timeEvent').paused = false;\n      }\n    }, this);\n\n    return this;\n  }\n\n  /**\n   * Calls {@link Phaser.Bullet#kill} on every in-flight bullet in this Weapon.\n   * Also re-enables their physics bodies, should they have been disabled via {@link #pauseAll}.\n   *\n   * @return {Weapon} This Weapon instance.\n   */\n  killAll() {\n    this.bullets.children.each(child => {\n      if (child.active) {\n        child.kill();\n      }\n      child.body.enable = true;\n    });\n\n    return this;\n  }\n\n  /**\n   * Resets the {@link #shots} counter back to zero. This is used when you've set\n   * {@link #fireLimit} and have hit (or just wish to reset) your limit.\n   *\n   * @param {integer} [newLimit] - Optionally set a new {@link #fireLimit}.\n   * @return {Weapon} This Weapon instance.\n   */\n  resetShots(newLimit) {\n    this.shots = 0;\n\n    if (newLimit !== undefined) {\n      this.fireLimit = newLimit;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets this Weapon to track the given Sprite, or any Object with a public {@link Phaser.Component.Core#world world}\n   * Point object. When a Weapon tracks a Sprite it will automatically update its {@link #fireFrom} value to match the\n   * Sprite's position within the Game World, adjusting the coordinates based on the offset arguments.\n   *\n   * This allows you to lock a Weapon to a Sprite, so that bullets are always launched from its location.\n   *\n   * Calling `trackSprite` will reset {@link #trackedPointer} to null, should it have been set, as you can\n   * only track _either_ a Sprite, or a Pointer, at once, but not both.\n   *\n   * @param {Phaser.GameObjects.Sprite|Object} sprite - The Sprite to track the position of.\n   * @param {integer} [offsetX=0] - The horizontal offset from the Sprites position to be applied to the Weapon.\n   * @param {integer} [offsetY=0] - The vertical offset from the Sprites position to be applied to the Weapon.\n   * @param {boolean} [trackRotation=false] - Should the Weapon also track the Sprites rotation?\n   * @return {Weapon} This Weapon instance.\n   */\n  trackSprite(sprite, offsetX = 0, offsetY = 0, trackRotation = false) {\n    this.trackedPointer = null;\n    this.trackedSprite = sprite;\n    this.trackRotation = trackRotation;\n\n    this.trackOffset.set(offsetX, offsetY);\n\n    return this;\n  }\n\n  /**\n   * Sets this Weapon to track the given Pointer.\n   * When a Weapon tracks a Pointer it will automatically update its {@link #fireFrom} value to match the Pointer's\n   * position within the Game World, adjusting the coordinates based on the offset arguments.\n   *\n   * This allows you to lock a Weapon to a Pointer, so that bullets are always launched from its location.\n   *\n   * Calling `trackPointer` will reset {@link #trackedSprite} to null, should it have been set, as you can\n   * only track _either_ a Pointer, or a Sprite, at once, but not both.\n   *\n   * @param {Phaser.Input.Pointer} [pointer] - The Pointer to track the position of.\n   * Defaults to `Input.activePointer` if not specified.\n   * @param {integer} [offsetX=0] - The horizontal offset from the Pointers position to be applied to the Weapon.\n   * @param {integer} [offsetY=0] - The vertical offset from the Pointers position to be applied to the Weapon.\n   * @return {Weapon} This Weapon instance.\n   */\n  trackPointer(pointer, offsetX = 0, offsetY = 0) {\n    if (pointer === undefined && this.scene.input) {\n      pointer = this.scene.input.activePointer;\n    }\n\n    this.trackedPointer = pointer;\n    this.trackedSprite = null;\n    this.trackRotation = false;\n\n    this.trackOffset.set(offsetX, offsetY);\n\n    return this;\n  }\n\n  /**\n   * Attempts to fire multiple bullets from the positions defined in the given array.\n   *\n   * If you provide a `from` argument, or if there is a tracked Sprite or Pointer, then\n   * the positions are treated as __offsets__ from the given objects position.\n   *\n   * If `from` is undefined, and there is no tracked object, then the bullets are fired\n   * from the given positions, as they exist in the world.\n   *\n   * Calling this method sets {@link #multiFire} to `true`.\n   *\n   * If there are not enough bullets available in the pool, and the pool cannot be extended,\n   * then this method may not fire from all of the given positions.\n   *\n   * When the bullets are launched they have their texture and frame updated, as required.\n   * The velocity of the bullets are calculated based on Weapon properties like {@link #bulletSpeed}.\n   *\n   * @param {array} positions - An array of positions. Each position can be any Object,\n   * as long as it has public `x` and `y` properties, such as Phaser.Point, { x: 0, y: 0 }, Phaser.Sprite, etc.\n   * @param {Phaser.GameObject.Sprite|Phaser.Math.Vector2|Object|string} [from]\n   * Optionally fires the bullets **from** the `x` and `y` properties of this object,\n   * _instead_ of any {@link #trackedSprite} or `trackedPointer` that is set.\n   * @return {array} An array containing all of the fired Phaser.Bullet objects,\n   * if a launch was successful, otherwise an empty array.\n   */\n  fireMany(positions, from) {\n    this.multiFire = true;\n\n    const bullets = [];\n\n    if (from || this.trackedSprite || this.trackedPointer) {\n      positions.forEach(offset => {\n        bullets.push(this.fire(from, null, null, offset.x, offset.y));\n      });\n    } else {\n      positions.forEach(position => {\n        bullets.push(this.fire(position));\n      });\n    }\n\n    return bullets;\n  }\n\n  /**\n   * Attempts to fire a single Bullet from a tracked Sprite or Pointer, but applies an offset\n   * to the position first. This is the same as calling {@link #fire} and passing in the offset arguments.\n   *\n   * If there are no more bullets available in the pool, and the pool cannot be extended,\n   * then this method returns `null`. It will also return `null` if not enough time has expired since the last time\n   * the Weapon was fired, as defined in the {@link #fireRate} property.\n   *\n   * Otherwise the first available bullet is selected, launched, and returned.\n   *\n   * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\n   * calculated based on Weapon properties like {@link #bulletSpeed}.\n   *\n   * If you wish to fire multiple bullets in a single game update, then set {@link #multiFire} to `true`\n   * and you can call this method as many times as you like, per loop. See also {@link #fireMany}.\n   *\n   * @param {number} [offsetX=0] - The horizontal offset from the position of the tracked Sprite or Pointer,\n   * as set with {@link #trackSprite}.\n   * @param {number} [offsetY=0] - The vertical offset from the position of the tracked Sprite or Pointer,\n   * as set with {@link #trackSprite}.\n   * @return {Bullet} The fired bullet, if a launch was successful, otherwise `null`.\n   */\n  fireOffset(offsetX = 0, offsetY = 0) {\n    return this.fire(null, null, null, offsetX, offsetY);\n  }\n\n  /**\n   * Fires a bullet **at** the given Pointer. The bullet will be launched from the {@link #fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param {Phaser.Input.Pointer} [pointer] - The Pointer to fire the bullet towards.\n   * @return {Bullet} The fired bullet if successful, null otherwise.\n   */\n  fireAtPointer(pointer) {\n    if (pointer === undefined && this.scene.input) {\n      pointer = this.scene.input.activePointer;\n    }\n\n    return this.fire(null, pointer.x, pointer.y);\n  }\n\n  /**\n   * Fires a bullet **at** the given Sprite. The bullet will be launched from the {@link #fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param {Phaser.GameObjects.Sprite} [sprite] - The Sprite to fire the bullet towards.\n   * @return {Bullet} The fired bullet if successful, null otherwise.\n   */\n  fireAtSprite(sprite) {\n    return this.fire(null, sprite.x, sprite.y);\n  }\n\n  /**\n   * Fires a bullet **at** the given coordinates. The bullet will be launched from the {@link #fireFrom} position,\n   * or from a Tracked Sprite or Pointer, if you have one set.\n   *\n   * @param {number} [x] - The x coordinate, in world space, to fire the bullet towards.\n   * @param {number} [y] - The y coordinate, in world space, to fire the bullet towards.\n   * @return {Bullet} The fired bullet if successful, null otherwise.\n   */\n  fireAtXY(x, y) {\n    return this.fire(null, x, y);\n  }\n\n  /**\n   * Attempts to fire a single Bullet. If there are no more bullets available in the pool,\n   * and the pool cannot be extended, then this method returns `null`. It will also return `null`\n   * if not enough time has expired since the last time the Weapon was fired,\n   * as defined in the {@link #fireRate} property.\n   *\n   * Otherwise the first available bullet is selected, launched, and returned.\n   *\n   * The arguments are all optional, but allow you to control both where the bullet is launched from, and aimed at.\n   *\n   * If you don't provide any of the arguments then it uses those set via properties such as {@link #trackedSprite},\n   * {@link #bulletAngle} and so on.\n   *\n   * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\n   * calculated based on Weapon properties like `bulletSpeed`.\n   *\n   * If you wish to fire multiple bullets in a single game update, then set `Weapon.multiFire = true`\n   * and you can call `fire` as many times as you like, per loop. Multiple fires in a single update\n   * only counts once towards the `shots` total, but you will still receive a Signal for each bullet.\n   *\n   * @param {Phaser.GameObjects.Sprite|Phaser.Math.Vector2|Object|string} [from]\n   * Optionally fires the bullet **from** the `x` and `y` properties of this object.\n   * If set this overrides {@link #trackedSprite} or `trackedPointer`. Pass `null` to ignore it.\n   * @param {number} [x] - The x coordinate, in world space, to fire the bullet **towards**.\n   * If left as `undefined`, or `null`, the bullet direction is based on its angle.\n   * @param {number} [y] - The y coordinate, in world space, to fire the bullet **towards**.\n   * If left as `undefined`, or `null`, the bullet direction is based on its angle.\n   * @param {number} [offsetX=0] - If the bullet is fired from a tracked Sprite or Pointer,\n   * or the `from` argument is set, this applies a horizontal offset from the launch position.\n   * @param {number} [offsetY=0] - If the bullet is fired from a tracked Sprite or Pointer,\n   * or the `from` argument is set, this applies a vertical offset from the launch position.\n   * @return {Bullet} The fired bullet, if a launch was successful, otherwise `null`.\n   */\n  fire(from, x = null, y = null, offsetX = 0, offsetY = 0) {\n    if (\n      this.scene.time.now < this._nextFire ||\n      (this.fireLimit > 0 && this.shots === this.fireLimit)\n    ) {\n      return null;\n    }\n\n    let speed = this.bulletSpeed;\n\n    //  Apply +- speed variance\n    if (this.bulletSpeedVariance !== 0) {\n      speed += Phaser.Math.Between(-this.bulletSpeedVariance, this.bulletSpeedVariance);\n    }\n\n    // Position the fireFrom rectangle\n    if (from) {\n      // Fire based on passed coordinates\n      this.updateFireFrom(from.x, from.y);\n    } else if (this.trackedSprite) {\n      // Fire based on tracked sprite\n      if (this.trackRotation) {\n        this._rotatedPoint.set(\n          this.trackedSprite.x + this.trackOffset.x,\n          this.trackedSprite.y + this.trackOffset.y\n        );\n        Phaser.Math.RotateAround(\n          this._rotatedPoint,\n          this.trackedSprite.x,\n          this.trackedSprite.y,\n          this.trackedSprite.rotation\n        );\n\n        this.updateFireFrom(this._rotatedPoint.x, this._rotatedPoint.y);\n      } else {\n        this.updateFireFrom(this.trackedSprite.x, this.trackedSprite.y);\n      }\n\n      if (this.bulletInheritSpriteSpeed) {\n        speed += this.trackedSprite.body.speed;\n      }\n    } else if (this.trackedPointer) {\n      // Fire based on tracked pointer\n      this.updateFireFrom(this.trackedPointer.x, this.trackedPointer.y);\n    }\n\n    // Take offset into account\n    this.fireFrom.x += offsetX;\n    this.fireFrom.y += offsetY;\n\n    // Pick a random coordinate inside the fireFrom rectangle\n    const randomX = this.fireFrom.x + Math.random() * this.fireFrom.width;\n    const randomY = this.fireFrom.y + Math.random() * this.fireFrom.height;\n\n    const fromX = this.fireFrom.width > 1 ? randomX : this.fireFrom.x;\n    const fromY = this.fireFrom.height > 1 ? randomY : this.fireFrom.y;\n\n    let angle = this.trackRotation ? this.trackedSprite.angle : this.fireAngle;\n\n    //  The position (in world space) to fire the bullet towards, if set\n    if (x !== null && y !== null) {\n      angle = Phaser.Math.RadToDeg(Math.atan2(y - fromY, x - fromX));\n    }\n\n    //  Apply +- angle variance\n    if (this.bulletAngleVariance !== 0) {\n      angle += Phaser.Math.Between(-this.bulletAngleVariance, this.bulletAngleVariance);\n    }\n\n    let moveX = 0;\n    let moveY = 0;\n\n    //  Avoid unnecessary sin/cos for right-angled shots\n    if (angle === 0 || angle === 180) {\n      // Only cos needed\n      moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n    } else if (angle === 90 || angle === 270) {\n      // Only sin needed\n      moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n    } else {\n      // Need to calculate both\n      moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n      moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n    }\n\n    let bullet = null;\n\n    // Attempt to get a bullet instance to use\n    if (this.autoExpandBulletsGroup) {\n      bullet = this.bullets.getFirstDead(true, fromX, fromY, this.bulletKey, this.bulletFrame);\n      bullet.setData('bulletManager', this);\n    } else {\n      bullet = this.bullets.getFirstDead(false);\n    }\n\n    // Prepare and fire the bullet\n    if (bullet) {\n      bullet.prepare(fromX, fromY);\n      bullet.setData({\n        fromX,\n        fromY,\n        killType: this.bulletKillType,\n        killDistance: this.bulletKillDistance,\n        rotateToVelocity: this.bulletRotateToVelocity,\n      });\n\n      // Prepare timer for bullet lifespan\n      if (this.bulletKillType === consts.KILL_LIFESPAN) {\n        bullet.setData('timeEvent', this.scene.time.addEvent({\n          delay: this.bulletLifespan,\n          callback: bullet.kill,\n          callbackScope: bullet,\n        }));\n        bullet.lifespan = this.bulletLifespan;\n      }\n\n      bullet.angle = angle + this.bulletAngleOffset;\n\n      //  Frames and Animations\n      if (this.bulletAnimation) {\n        bullet.anims.play(this.bulletAnimation);\n      } else if (this.bulletFrameCycle) {\n        // Calculate bullet frame to use\n        if (this.bulletFrameIndex >= this.bulletFrames.length) {\n          this.bulletFrameIndex = 0;\n        }\n        bullet.setTexture(this.bulletKey, this.bulletFrameIndex);\n        this.bulletFrameIndex++;\n      } else if (this.bulletFrameRandom) {\n        // Pick a bullet frame at random\n        const nextFrame = Math.floor(Math.random() * this.bulletFrames.length);\n        bullet.setTexture(this.bulletKey, nextFrame);\n      }\n\n      // Set correct size and position for bullet body\n      if (bullet.getData('bodyDirty')) {\n        if (this._data.customBody) {\n          bullet.body.setSize(this._data.width, this._data.height);\n          bullet.body.setOffset(this._data.offsetX, this._data.offsetY);\n        }\n\n        bullet.body.collideWorldBounds = this.bulletCollideWorldBounds;\n\n        bullet.setData('bodyDirty', false);\n      }\n\n      bullet.body.setVelocity(moveX, moveY);\n      bullet.body.setGravity(this.bulletGravity.x, this.bulletGravity.y);\n\n      let next = 0;\n\n      // Calculate when to fire next bullet, taking into account speed variance\n      if (this.bulletSpeedVariance !== 0) {\n        let rate = this.fireRate;\n\n        rate += Phaser.Math.Between(-this.fireRateVariance, this.fireRateVariance);\n\n        if (rate < 0) {\n          rate = 0;\n        }\n\n        next = this.scene.time.now + rate;\n      } else {\n        next = this.scene.time.now + this.fireRate;\n      }\n\n      // Prepare for next shot\n      if (this.multiFire) {\n        if (!this._hasFired) {\n          //  We only add 1 to the 'shots' count for multiFire shots\n          this._hasFired = true;\n          this._tempNextFire = next;\n          this.shots++;\n        }\n      } else {\n        this._nextFire = next;\n\n        this.shots++;\n      }\n\n      // Emit events\n      this.eventEmitter.emit('fire', bullet, this, speed);\n\n      if (this.fireLimit > 0 && this.shots === this.fireLimit) {\n        this.eventEmitter('firelimit', this, this.fireLimit);\n      }\n    }\n\n    return bullet;\n  }\n\n  /**\n   * Set the fireFrom rectangle based on passed coords\n   * @private\n   * @param {number} x - X coordinate for where to fire from\n   * @param {number} y - Y coordinate for where to fire from\n   * @return {void}\n   */\n  updateFireFrom(x, y){\n    if (this.fireFrom.width > 1) {\n      // If size is larger than 1, center on coordinates\n      Phaser.Geom.Rectangle.CenterOn(\n        this.fireFrom,\n        x + this.trackOffset.x,\n        y + this.trackOffset.y\n      );\n    } else {\n      this.fireFrom.x = x + this.trackOffset.x;\n      this.fireFrom.y = y + this.trackOffset.y;\n    }\n  }\n\n  /**\n   * You can modify the size of the physics Body the Bullets use to be any dimension you need.\n   * This allows you to make it smaller, or larger, than the parent Sprite.\n   * You can also control the x and y offset of the Body. This is the position of the\n   * Body relative to the top-left of the Sprite _texture_.\n   *\n   * For example: If you have a Sprite with a texture that is 80x100 in size,\n   * and you want the physics body to be 32x32 pixels in the middle of the texture, you would do:\n   *\n   * `setSize(32 / Math.abs(this.scale.x), 32 / Math.abs(this.scale.y), 24, 34)`\n   *\n   * Where the first two parameters are the new Body size (32x32 pixels) relative to the Sprite's scale.\n   * 24 is the horizontal offset of the Body from the top-left of the Sprites texture, and 34\n   * is the vertical offset.\n   *\n   * @param {number} width - The width of the Body.\n   * @param {number} height - The height of the Body.\n   * @param {number} [offsetX=0] - The X offset of the Body from the top-left of the Sprites texture.\n   * @param {number} [offsetY=0] - The Y offset of the Body from the top-left of the Sprites texture.\n   * @return {Weapon} The Weapon Plugin.\n   */\n  setBulletBodyOffset(width, height, offsetX=0, offsetY=0) {\n    this._data.customBody = true;\n    this._data.width = width;\n    this._data.height = height;\n    this._data.offsetX = offsetX;\n    this._data.offsetY = offsetY;\n\n    //  Update all bullets in the pool\n    this.bullets.children.each(child => {\n      child.body.setSize(width, height);\n      child.body.setOffset(offsetX, offsetY);\n      child.setData('bodyDirty', false);\n    });\n\n    return this;\n  }\n\n  /**\n   * Sets the texture frames that the bullets can use when being launched.\n   *\n   * This is intended for use when you've got numeric based frames, such as\n   * those loaded via a Sprite Sheet.\n   *\n   * It works by calling `Phaser.Utils.Array.NumberArray` internally, using\n   * the min and max values provided. Then it sets the frame index to be zero.\n   *\n   * You can optionally set the cycle and random booleans, to allow bullets to\n   * cycle through the frames when they're fired, or pick one at random.\n   *\n   * @param {integer} min - The minimum value the frame can be. Usually zero.\n   * @param {integer} max - The maximum value the frame can be.\n   * @param {integer} [selcetionMethod=BULLET_FRAME_STABLE] - Specifies how the\n   *  frame for the fired bullet will be selected. See consts.BULLET_FRAME_XYZ\n   *  for options.\n   * @return {Weapon} The Weapon Plugin.\n   */\n  setBulletFrames(min, max, selectionMethod = consts.BULLET_FRAME_STABLE) {\n    if (\n      typeof selectionMethod !== 'number' ||\n      selectionMethod < consts.BULLET_FRAME_STABLE ||\n      selectionMethod > consts.BULLET_FRAME_RANDOM\n    ) {\n      log(`Invalid bullet frame selection method specified: ${selectionMethod}`, this.logLevel);\n    }\n\n    if (min > max) {\n      log(`min frame (${min}) must be <= max frame (${max})`, this.logLevel);\n    }\n\n    this.bulletFrames = Phaser.Utils.Array.NumberArray(min, max);\n    this.bulletFrameIndex = 0;\n    this.bulletFrameCycle = selectionMethod === consts.BULLET_FRAME_CYCLE;\n    this.bulletFrameRandom = selectionMethod === consts.BULLET_FRAME_RANDOM;\n\n    return this;\n  }\n\n  /**\n   * Adds a new animation under the given key. Optionally set the frames, frame rate and loop.\n   * The arguments are all the same as for `Animation.add`, and work in the same way.\n   *\n   * {@link #bulletAnimation} will be set to this animation after it's created. From that point on, all\n   * bullets fired will play using this animation. You can swap between animations by calling this method\n   * several times, and then just changing the {@link #bulletAnimation} property to the name of the animation\n   * you wish to play for the next launched bullet.\n   *\n   * If you wish to stop using animations at all, set {@link #bulletAnimation} to '' (an empty string).\n   *\n   * @param {string} name - The unique (within the Weapon instance) name for the animation, i.e. \"fire\", \"blast\".\n   * @param {Array} [frames=null] - An array of numbers/strings that correspond to the framesto add to this animation\n   * and in which order. e.g. [1, 2, 3] or ['run0', 'run1', run2]). If null then all frames will be used.\n   * @param {number} [frameRate=60] - The speed at which the animation should play.\n   * The speed is given in frames per second.\n   * @param {number} [loop=1] - Number of times to repeat the animation. Set to -1 to repeat forever.\n   * @return {Weapon} The Weapon Plugin.\n   */\n  addBulletAnimation(name, frames, frameRate, loop) {\n    if (!this.scene.sys.anims.anims.contains(name)) {\n      this.scene.sys.anims.create({\n        key: name,\n        frames,\n        frameRate,\n        loop,\n      });\n\n      this.anims[name] = this.scene.sys.anims.anims.entries[name];\n    }\n\n    this.bulletAnimation = name;\n\n    return this;\n  }\n\n  /**\n   * Internal update method, called by the Weapon Plugin.\n   * @returns {void}\n   */\n  update() {\n    if (this._bulletKillType === consts.KILL_WEAPON_BOUNDS) {\n      if (this.trackedSprite) {\n        this.trackedSprite.updateTransform();\n        Phaser.Geom.Rectangle.CenterOn(this.bounds,this.trackedSprite.x, this.trackedSprite.y);\n      } else if (this.trackedPointer) {\n        Phaser.Geom.Rectangle.CenterOn(this.bounds,this.trackedPointer.x, this.trackedPointer.y);\n      }\n    }\n\n    if (this.autofire) {\n      this.fire();\n    }\n  }\n\n  /**\n   * Internal update method, called by the Weapon Plugin.\n   *\n   * @protected\n   * @returns {void}\n   */\n  postRender() {\n    if (!this.multiFire || !this._hasFired) {\n      return;\n    }\n\n    this._hasFired = false;\n\n    this._nextFire = this._tempNextFire;\n  }\n\n  /**\n   * Destroys this Weapon.\n   * You must release everything in here, all references, all objects, free it all up.\n   * @returns {void}\n   */\n  destroy() {\n    this.scene = null;\n\n    this.bullets.destroy(true);\n  }\n}\n\nexport default Weapon;\n\n\n\n// WEBPACK FOOTER //\n// ./Weapon.js","import consts from './consts';\n\n/**\n * Log text to the console or throw an error\n * @param {string} text - Text to be logged\n * @param {string} logLevel - The log level, either `warn`, `error' or `off`\n */\nfunction log(text, logLevel){\n  if(logLevel === 'warn'){\n    console.warn(text);\n  } else if (logLevel === 'error'){\n    throw new Error(text);\n  }\n}\n\n/**\n * Check the config of the weapon for common errors and weird configurations.\n * @param {Weapon} weapon - The weapon being validated\n * @param {string} property - The property of the weapon being validated\n */\nfunction validateConfig(weapon, property){\n  if (\n    ['bulletWorldWrap', 'bulletKillType'].includes(property) && \n    weapon.bulletWorldWrap && \n    (weapon.bulletKillType === consts.KILL_WORLD_BOUNDS || \n      weapon.bulletKillType === consts.KILL_WEAPON_BOUNDS)\n  ){\n    log(\n      'Warning: KILL_WORLD_BOUNDS and KILL_WEAPON_BOUNDS does not work well with bulletWorldWrap set to true.', \n      weapon.logLevel\n    );\n  }\n  if (['bulletKillType', 'bulletLifespan'].includes(property) && \n  weapon.bulletKillType === consts.KILL_LIFESPAN && \n  weapon.bulletLifespan < 0\n  ) {\n    log('Invalid bulletLifespan; must be > 0; currently ' + weapon.bulletLifespan, weapon.logLevel);\n  }\n  if (\n    ['fireLimit', \n      'fireRate', \n      'fireRateVariance', \n      'bulletAngleVariance', \n      'bulletSpeedVariance',\n      'bulletKillDistance'].includes(property) && \n    weapon[property] < 0\n  ){\n    log('Invalid ' + property + '; must be >= 0; currently ' + weapon[property], weapon.logLevel);\n  }\n}\n\nexport { log };\nexport default validateConfig;\n\n\n// WEBPACK FOOTER //\n// ./validateConfig.js"],"sourceRoot":""}