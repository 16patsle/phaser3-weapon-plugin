{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///WeaponPlugin.min.js","webpack:///webpack/bootstrap f9de60b886aa54024abd","webpack:///./consts.js","webpack:///./Bullet.js","webpack:///./main.js","webpack:///./Weapon.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","KILL_NEVER","KILL_LIFESPAN","KILL_DISTANCE","KILL_WEAPON_BOUNDS","KILL_CAMERA_BOUNDS","KILL_WORLD_BOUNDS","KILL_STATIC_BOUNDS","ANGLE_UP","ANGLE_DOWN","ANGLE_LEFT","ANGLE_RIGHT","ANGLE_NORTH_EAST","ANGLE_NORTH_WEST","ANGLE_SOUTH_EAST","ANGLE_SOUTH_WEST","BULLET_FRAME_STABLE","BULLET_FRAME_CYCLE","BULLET_FRAME_RANDOM","_typeof","obj","Symbol","iterator","constructor","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","writable","key","_createClass","protoProps","staticProps","_possibleConstructorReturn","_assertThisInitialized","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","value","_setPrototypeOf","ReferenceError","consts","bulletID","Bullet","_Phaser$GameObjects$S","scene","x","y","frame","_this","physics","add","existing","data","timeEvent","bulletManager","fromX","fromY","bodyDirty","rotateToVelocity","killType","killDistance","bodyBounds","Phaser","Geom","Rectangle","setActive","setVisible","body","enable","reset","debugShowBody","debugPhysics","debugShowVelocity","stop","destroy","eventEmitter","emit","active","Math","Vector2","distance","kill","Intersects","RectangleToRectangle","bulletBounds","getBounds","rotation","velocity","atan","bulletWorldWrap","world","wrap","bulletWorldWrapPadding","GameObjects","Sprite","Weapon","WeaponPlugin","_Phaser$Plugins$Scene","pluginManager","weapons","bulletLimit","group","weaponClass","weapon","push","on","postRender","systems","events","preUpdate","update","postUpdate","pause","resume","sleep","wake","shutdown","time","delta","forEach","game","Plugins","ScenePlugin","bullets","autoExpandBulletsGroup","autofire","shots","fireLimit","fireRate","fireRateVariance","fireFrom","fireAngle","bulletInheritSpriteSpeed","bulletAnimation","bulletFrameRandom","bulletFrameCycle","bulletAngleOffset","bulletAngleVariance","bulletSpeed","bulletSpeedVariance","bulletLifespan","bulletKillDistance","bulletGravity","bulletRotateToVelocity","bulletKey","bulletFrame","_bulletClass","_bulletCollideWorldBounds","_bulletKillType","_data","customBody","width","height","offsetX","offsetY","bounds","bulletFrames","bulletFrameIndex","anims","trackedSprite","trackedPointer","multiFire","_hasFired","trackRotation","trackOffset","_nextFire","_tempNextFire","_rotatedPoint","Events","EventEmitter","createBullets","quantity","bulletClass","undefined","classType","maxSize","runChildUpdate","createMultiple","repeat","visible","children","each","child","addMultiple","entries","callback","callbackContext","extraArgs","arguments","paused","newLimit","sprite","set","pointer","input","activePointer","positions","from","offset","fire","position","now","speed","Between","CenterOn","RotateAround","randomX","random","randomY","angle","RadToDeg","atan2","moveX","moveY","cos","DegToRad","sin","bullet","getFirstDead","prepare","bulletKillType","Error","addEvent","delay","bind","lifespan","play","setTexture","nextFrame","floor","setSize","setOffset","collideWorldBounds","bulletCollideWorldBounds","setVelocity","setGravity","next","rate","min","max","selectionMethod","concat","Utils","Array","NumberArray","frames","frameRate","loop","sys","contains","debugBodies","updateTransform","centerOn","type","cameras","main","_bounds"],"mappings":"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","file":"WeaponPlugin.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WeaponPlugin\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WeaponPlugin\"] = factory();\n\telse\n\t\troot[\"WeaponPlugin\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WeaponPlugin\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WeaponPlugin\"] = factory();\n\telse\n\t\troot[\"WeaponPlugin\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 2);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = {\n  /**\r\n   * A {@link #bulletKillType} constant that stops the bullets from ever being destroyed automatically.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  KILL_NEVER: 0,\n\n  /**\r\n   * A {@link #bulletKillType} constant that automatically kills the bullets when their {@link #bulletLifespan} expires.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  KILL_LIFESPAN: 1,\n\n  /**\r\n   * A {@link #bulletKillType} constant that automatically kills the bullets after they\r\n   * exceed the {@link #bulletDistance} from their original firing position.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  KILL_DISTANCE: 2,\n\n  /**\r\n   * A {@link #bulletKillType} constant that automatically kills the bullets when they leave the {@link #bounds} rectangle.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  KILL_WEAPON_BOUNDS: 3,\n\n  /**\r\n   * A {@link #bulletKillType} constant that automatically kills the bullets when they leave the {@link Phaser.Camera#bounds} rectangle.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  KILL_CAMERA_BOUNDS: 4,\n\n  /**\r\n   * A {@link #bulletKillType} constant that automatically kills the bullets when they leave the {@link Phaser.World#bounds} rectangle.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  KILL_WORLD_BOUNDS: 5,\n\n  /**\r\n   * A {@link #bulletKillType} constant that automatically kills the bullets when they leave the {@link #bounds} rectangle.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  KILL_STATIC_BOUNDS: 6,\n\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face up.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  ANGLE_UP: 270,\n\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face down.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  ANGLE_DOWN: 90,\n\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face left.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  ANGLE_LEFT: 180,\n\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face right.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  ANGLE_RIGHT: 0,\n\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north east.\r\n   * @constant Phaser.ANGLE_NORTH_EAST\r\n   * @type {integer}\r\n   */\n  ANGLE_NORTH_EAST: 315,\n\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north west.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  ANGLE_NORTH_WEST: 225,\n\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south east.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  ANGLE_SOUTH_EAST: 45,\n\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south west.\r\n   * @constant\r\n   * @type {integer}\r\n   */\n  ANGLE_SOUTH_WEST: 135,\n\n  /**\r\n   * When selecting a bullet frame the same frame should always be used. This\r\n   * is the default value.\r\n   * @constant\r\n   * @type { integer }\r\n   */\n  BULLET_FRAME_STABLE: 0,\n\n  /**\r\n   * When selecting a bullet frame the next frame should be used\r\n   * @constant\r\n   * @type { integer }\r\n   */\n  BULLET_FRAME_CYCLE: 1,\n\n  /**\r\n   * When selecting a bullet frame a random frame should be used.\r\n   * @constant\r\n   * @type { integer }\r\n   */\n  BULLET_FRAME_RANDOM: 2\n};\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n/**\r\n * @author       Patrick Sletvold\r\n * @author       jdotr <https://github.com/jdotrjs>\r\n * @author       Richard Davey\r\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\r\n */\nvar consts = __webpack_require__(0);\n\nvar bulletID = 0;\n\nvar Bullet =\n/*#__PURE__*/\nfunction (_Phaser$GameObjects$S) {\n  _inherits(Bullet, _Phaser$GameObjects$S);\n\n  /**\r\n   * Create a new `Bullet` object. Bullets are used by the `Weapon` class, and are normal Sprites,\r\n   * with a few extra properties in the data object to handle Weapon specific features.\r\n   *\r\n   * @param {Phaser.Scene} scene - A reference to the currently running scene.\r\n   * @param {number} x - The x coordinate (in world space) to position the Particle at.\r\n   * @param {number} y - The y coordinate (in world space) to position the Particle at.\r\n   * @param {string} key - This is the image or texture used by the Particle during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.\r\n   * @param {string|number} frame - If this Particle is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.\r\n   */\n  function Bullet(scene, x, y, key, frame) {\n    var _this;\n\n    _classCallCheck(this, Bullet);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Bullet).call(this, scene, x, y, key, frame));\n    _this.bulletID = bulletID;\n    bulletID++;\n\n    _this.scene.physics.add.existing(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.data = {\n      timeEvent: null,\n      bulletManager: null,\n      fromX: 0,\n      fromY: 0,\n      bodyDirty: true,\n      rotateToVelocity: false,\n      killType: 0,\n      killDistance: 0,\n      bodyBounds: new Phaser.Geom.Rectangle()\n    };\n    return _this;\n  }\n  /**\r\n   * Prepares this bullet to be fired and interact with the rest of the scene\r\n   * again.\r\n   */\n\n\n  _createClass(Bullet, [{\n    key: \"prepare\",\n    value: function prepare(x, y) {\n      this.setActive(true);\n      this.setVisible(true);\n      this.body.enable = true;\n      this.body.reset(x, y);\n      this.body.debugShowBody = this.data.bulletManager.debugPhysics;\n      this.body.debugShowVelocity = this.data.bulletManager.debugPhysics;\n    }\n    /**\r\n     * Kills the Bullet, freeing it up for re-use by the Weapon bullet pool.\r\n     * Also dispatches the `Weapon`s kill signal.\r\n     * @returns {Bullet} This instance of the bullet class\r\n     */\n\n  }, {\n    key: \"kill\",\n    value: function kill() {\n      // Reproduce Phaser.Physics.Arcade.Components.Enable.disableBody because\n      // we can't assume that the bullet class has it built in.\n      this.body.stop();\n      this.body.enable = false;\n      this.setActive(false);\n      this.setVisible(false);\n      this.body.debugShowBody = false;\n      this.body.debugShowVelocity = false; // TODO: potentially we don't need to destroy the time event and we can\n      // just pause when the bullet is killed and restart it when it's refired.\n      // For now though do the simple thing and discard it.\n      // Another option would be to use Date.now() and manually process pause\n      // events with a flag and some math.\n      // Both of those are probably premature optimizations.\n\n      if (this.data.timeEvent !== null) {\n        this.data.timeEvent.destroy();\n        this.data.timeEvent = null;\n      }\n\n      this.data.bulletManager.eventEmitter.emit('kill', this);\n      return this;\n    }\n    /**\r\n     * Updates the Bullet, killing as required.\r\n     * @returns {Bullet} This instance of the bullet class\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (!this.active) {\n        // this was previously a check to this.exists\n        return;\n      }\n\n      if (this.data.killType > consts.KILL_LIFESPAN) {\n        if (this.data.killType === consts.KILL_DISTANCE) {\n          if (new Phaser.Math.Vector2(this.data.fromX, this.data.fromY).distance(this) > this.data.killDistance) {\n            this.kill();\n          }\n        } else if (!Phaser.Geom.Intersects.RectangleToRectangle(this.data.bulletManager.bulletBounds, this.body.getBounds(this.data.bodyBounds))) {\n          this.kill();\n        }\n      }\n\n      if (this.data.rotateToVelocity) {\n        this.rotation = this.body.velocity.atan();\n      }\n\n      if (this.data.bulletManager.bulletWorldWrap) {\n        this.scene.physics.world.wrap(this, this.data.bulletManager.bulletWorldWrapPadding);\n      }\n    }\n  }]);\n\n  return Bullet;\n}(Phaser.GameObjects.Sprite);\n\nmodule.exports = Bullet;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n/**\r\n * @author       Patrick Sletvold\r\n * @author       jdotr <https://github.com/jdotrjs>\r\n * @author       Richard Davey\r\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\r\n */\nvar Weapon = __webpack_require__(3);\n\nvar Bullet = __webpack_require__(1);\n\nvar consts = __webpack_require__(0);\n/**\r\n * The Weapon Plugin provides the ability to easily create a bullet pool\r\n * and manager.\r\n *\r\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\r\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\r\n * not currently work with Impact or Matter Physics.\r\n *\r\n * The Bullets are created inside of {@link #bullets weapon.bullets}, which is\r\n * a {@link Phaser.GameObjects.Group} instance. Anything you can usually do\r\n * with a Group, such as move it around the display list, iterate it, etc can\r\n * be done to the bullets Group too.\r\n *\r\n * Bullets can have textures and even animations. You can control the speed at\r\n * which they are fired, the firing rate, the firing angle, and even set things\r\n * like gravity for them.\r\n *\r\n * A small example, using add.weapon, assumed to be running from within a\r\n * {@link Phaser.Scene#create} method:\r\n *\r\n * ```javascript\r\n * var weapon = this.add.weapon(10, 'bullet');\r\n * weapon.fireFrom.set(300, 300);\r\n * this.input.onDown.add(weapon.fire, this); // Update this\r\n * ```\r\n */\n\n\nvar WeaponPlugin =\n/*#__PURE__*/\nfunction (_Phaser$Plugins$Scene) {\n  _inherits(WeaponPlugin, _Phaser$Plugins$Scene);\n\n  /**\r\n   * @param {Phaser.Scene} scene - A reference to the Phaser.Scene instance.\r\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the\r\n   *  Phaser.Plugins.PluginManager instance.\r\n   */\n  function WeaponPlugin(scene, pluginManager) {\n    var _this;\n\n    _classCallCheck(this, WeaponPlugin);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WeaponPlugin).call(this, scene, pluginManager));\n    _this.weapons = []; // Register our new Game Object type\n    // pluginManager.registerGameObject('weapon', this.add);\n\n    return _this;\n  }\n\n  _createClass(WeaponPlugin, [{\n    key: \"add\",\n    value: function add(bulletLimit, key, frame, group, weaponClass) {\n      if (!weaponClass) {\n        weaponClass = Weapon;\n      }\n\n      var weapon = new weaponClass(this.scene, bulletLimit, key, frame, group);\n      this.weapons.push(weapon);\n      return weapon;\n    }\n    /**\r\n     * Called by the PluginManager when this plugin is started.\r\n     * If a plugin is stopped, and then started again, this will get called again.\r\n     * Typically called immediately after `BasePlugin.init`.\r\n     *\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      eventEmitter.on('postrender', this.postRender, this);\n    }\n    /**\r\n     * If this is a Scene Plugin (i.e. installed into a Scene) then this method is called when the Scene boots.\r\n     * By this point the plugin properties `scene` and `systems` will have already been set.\r\n     * In here you can listen for Scene events and set-up whatever you need for this plugin to run.\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: \"boot\",\n    value: function boot() {\n      var eventEmitter = this.systems.events; //  Listening to the following events is entirely optional, although we would recommend cleanly shutting down and destroying at least.\n      //  If you don't need any of these events then remove the listeners and the relevant methods too.\n\n      eventEmitter.on('preupdate', this.preUpdate, this);\n      eventEmitter.on('update', this.update, this);\n      eventEmitter.on('postupdate', this.postUpdate, this);\n      eventEmitter.on('pause', this.pause, this);\n      eventEmitter.on('resume', this.resume, this);\n      eventEmitter.on('sleep', this.sleep, this);\n      eventEmitter.on('wake', this.wake, this);\n      eventEmitter.on('shutdown', this.shutdown, this);\n      eventEmitter.on('destroy', this.destroy, this);\n    } //  Called every Scene step - phase 1\n\n  }, {\n    key: \"preUpdate\",\n    value: function preUpdate(time, delta) {} // Empty\n\n    /**\r\n     * Internal update method, called by the PluginManager.\r\n     *\r\n     * @protected\r\n     * @param {number} time - Current game time\r\n     * @param {number} delta - Time since last call\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(time, delta) {\n      this.weapons.forEach(function (weapon) {\n        weapon.update();\n      });\n    } //  Called every Scene step - phase 3\n\n  }, {\n    key: \"postUpdate\",\n    value: function postUpdate(time, delta) {} // Empty\n\n    /**\r\n     * Internal update method, called by the PluginManager.\r\n     *\r\n     * @protected\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: \"postRender\",\n    value: function postRender() {\n      this.weapons.forEach(function (weapon) {\n        weapon.postRender();\n      });\n    } //  Called when a Scene is paused. A paused scene doesn't have its Step run, but still renders.\n\n  }, {\n    key: \"pause\",\n    value: function pause() {} // Empty\n    //  Called when a Scene is resumed from a paused state.\n\n  }, {\n    key: \"resume\",\n    value: function resume() {} // Empty\n    //  Called when a Scene is put to sleep. A sleeping scene doesn't update or render, but isn't destroyed or shutdown. preUpdate events still fire.\n\n  }, {\n    key: \"sleep\",\n    value: function sleep() {} // Empty\n    //  Called when a Scene is woken from a sleeping state.\n\n  }, {\n    key: \"wake\",\n    value: function wake() {} // Empty\n    //  Called when a Scene shuts down, it may then come back again later (which will invoke the 'start' event) but should be considered dormant.\n\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {} // Empty\n\n    /**\r\n     * Destroys this Weapon.\r\n     * You must release everything in here, all references, all objects, free it all up.\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.pluginManager = null;\n      this.game = null;\n      this.scene = null;\n      this.systems = null;\n    }\n  }]);\n\n  return WeaponPlugin;\n}(Phaser.Plugins.ScenePlugin);\n\nWeaponPlugin.Weapon = Weapon;\nWeaponPlugin.Bullet = Bullet;\nWeaponPlugin.consts = consts; //  Make sure you export the plugin for webpack to expose\n\nmodule.exports = WeaponPlugin;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\r\n * @author       Patrick Sletvold\r\n * @author       jdotr <https://github.com/jdotrjs>\r\n * @author       Richard Davey\r\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\r\n */\nvar Bullet = __webpack_require__(1);\n\nvar consts = __webpack_require__(0);\n/**\r\n * The Weapon provides the ability to easily create a bullet pool and manager.\r\n *\r\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\r\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\r\n * not currently work with P2 Physics.\r\n *\r\n * The Bullets are created inside of {@link #bullets weapon.bullets}, which is\r\n * a {@link Phaser.GameObjects.Group} instance. Anything you can usually do\r\n * with a Group, such as move it around the display list, iterate it, etc can\r\n * be done to the bullets Group too.\r\n *\r\n * Bullets can have textures and even animations. You can control the speed at\r\n * which they are fired, the firing rate, the firing angle, and even set things\r\n * like gravity for them.\r\n *\r\n * A small example, using add.weapon, assumed to be running from within a\r\n * {@link Phaser.Scene#create} method:\r\n *\r\n * ```javascript\r\n * var weapon = this.add.weapon(10, 'bullet');\r\n * weapon.fireFrom.set(300, 300);\r\n * this.input.onDown.add(weapon.fire, this); // Update this\r\n * ```\r\n */\n\n\nvar Weapon =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * TODO: a builder style interface would be neat. Can be kicked way forward\r\n   * into polishing.\r\n   * @param {Phaser.Scene} scene - A reference to the Phaser.Scene instance.\r\n   * @param {number} bulletLimit - The number of bullets to create.\r\n   * @param {String} key - The texture key for the bullet.\r\n   * @param {String} frame - The frame name for the bullet.\r\n   * @param {Phaser.GameObjects.Group} group - A group to add the bullets to.\r\n   */\n  function Weapon(scene, bulletLimit, key, frame, group) {\n    _classCallCheck(this, Weapon);\n\n    this.scene = scene;\n    this.debugPhysics = null;\n    /**\r\n     * This is the Phaser.Group that contains all of the bullets managed by this plugin.\r\n     * @type {Phaser.GameObjects.Group}\r\n     */\n\n    this.bullets = null;\n    /**\r\n     * Should the bullet pool run out of bullets (i.e. they are all in flight) then this\r\n     * boolean controls if the Group will create a brand new bullet object or not.\r\n     * @type {boolean}\r\n     * @default\r\n     */\n\n    this.autoExpandBulletsGroup = false;\n    /**\r\n     * Will this weapon auto fire? If set to true then a new bullet will be fired\r\n     * based on the {@link #fireRate} value.\r\n     * @type {boolean}\r\n     * @default\r\n     */\n\n    this.autofire = false;\n    /**\r\n     * The total number of bullets this Weapon has fired so far.\r\n     * You can limit the number of shots allowed (via {@link #fireLimit}), and reset\r\n     * this total via {@link #resetShots}.\r\n     * @type {number}\r\n     * @default\r\n     */\n\n    this.shots = 0;\n    /**\r\n     * The maximum number of shots that this Weapon is allowed to fire before it stops.\r\n     * When the limit is his the {@link #onFireLimit} Signal is dispatched.\r\n     * You can reset the shot counter via {@link #resetShots}.\r\n     * @type {number}\r\n     * @default\r\n     */\n\n    this.fireLimit = 0;\n    /**\r\n     * The minimum interval between shots, in milliseconds.\r\n     * @type {number}\r\n     * @default\r\n     */\n\n    this.fireRate = 100;\n    /**\r\n     * This is a modifier that is added to the {@link #fireRate} each update to add variety\r\n     * to the firing rate of the Weapon. The value is given in milliseconds.\r\n     * If you've a `fireRate` of 200 and a `fireRateVariance` of 50 then the actual\r\n     * firing rate of the Weapon will be between 150 and 250.\r\n     * @type {number}\r\n     * @default\r\n     */\n\n    this.fireRateVariance = 0;\n    /**\r\n     * This is a Rectangle from within which the bullets are fired. By default it's a 1x1\r\n     * rectangle, the equivalent of a Point. But you can change the width and height, and if\r\n     * larger than 1x1 it'll pick a random point within the rectangle to launch the bullet from.\r\n     * @type {Phaser.Geom.Rectangle}\r\n     */\n\n    this.fireFrom = new Phaser.Geom.Rectangle(0, 0, 1, 1);\n    /**\r\n     * The angle at which the bullets are fired. This can be a const such as Phaser.ANGLE_UP\r\n     * or it can be any number from 0 to 360 inclusive, where 0 degrees is to the right.\r\n     * @type {integer}\r\n     * @default\r\n     */\n\n    this.fireAngle = consts.ANGLE_UP;\n    /**\r\n     * When a Bullet is fired it can optionally inherit the velocity of the `trackedSprite` if set.\r\n     * @type {boolean}\r\n     * @default\r\n     */\n\n    this.bulletInheritSpriteSpeed = false;\n    /**\r\n     * The string based name of the animation that the Bullet will be given on launch.\r\n     * This is set via {@link #addBulletAnimation}.\r\n     * @type {string}\r\n     * @default\r\n     */\n\n    this.bulletAnimation = '';\n    /**\r\n     * If you've added a set of frames via {@link #setBulletFrames} then you can optionally\r\n     * chose for each Bullet fired to pick a random frame from the set.\r\n     * @type {boolean}\r\n     * @default\r\n     */\n\n    this.bulletFrameRandom = false;\n    /**\r\n     * If you've added a set of frames via {@link #setBulletFrames} then you can optionally\r\n     * chose for each Bullet fired to use the next frame in the set. The frame index is then\r\n     * advanced one frame until it reaches the end of the set, then it starts from the start\r\n     * again. Cycling frames like this allows you to create varied bullet effects via\r\n     * sprite sheets.\r\n     * @type {boolean}\r\n     * @default\r\n     */\n\n    this.bulletFrameCycle = false;\n    /**\r\n     * Should the Bullets wrap around the world bounds? This automatically calls\r\n     * `World.wrap` on the Bullet each frame. See the docs for that method for details.\r\n     * @type {boolean}\r\n     * @default\r\n     */\n\n    this.bulletWorldWrap = false;\n    /**\r\n     * If `bulletWorldWrap` is true then you can provide an optional padding value with this\r\n     * property. It's added to the calculations determining when the Bullet should wrap around\r\n     * the world or not. The value is given in pixels.\r\n     * @type {integer}\r\n     * @default\r\n     */\n\n    this.bulletWorldWrapPadding = 0;\n    /**\r\n     * An optional angle offset applied to the Bullets when they are launched.\r\n     * This is useful if for example your bullet sprites have been drawn facing up, instead of\r\n     * to the right, and you want to fire them at an angle. In which case you can set the\r\n     * angle offset to be 90 and they'll be properly rotated when fired.\r\n     * @type {number}\r\n     * @default\r\n     */\n\n    this.bulletAngleOffset = 0;\n    /**\r\n     * This is a variance added to the angle of Bullets when they are fired.\r\n     * If you fire from an angle of 90 and have a `bulletAngleVariance` of 20 then the actual\r\n     * angle of the Bullets will be between 70 and 110 degrees. This is a quick way to add a\r\n     * great 'spread' effect to a Weapon.\r\n     * @type {number}\r\n     * @default\r\n     */\n\n    this.bulletAngleVariance = 0;\n    /**\r\n     * The initial velocity of fired bullets, in pixels per second.\r\n     * @type {number}\r\n     * @default\r\n     */\n\n    this.bulletSpeed = 200;\n    /**\r\n     * This is a variance added to the speed of Bullets when they are fired.\r\n     * If bullets have a {@link #bulletSpeed} value of 200, and a `bulletSpeedVariance` of 50\r\n     * then the actual speed of the Bullets will be between 150 and 250 pixels per second.\r\n     * @type {number}\r\n     * @default\r\n     */\n\n    this.bulletSpeedVariance = 0;\n    /**\r\n     * If you've set {@link #bulletKillType} to `consts.KILL_LIFESPAN` this controls the amount\r\n     * of lifespan the Bullets have set on launch. The value is given in milliseconds.\r\n     * When a Bullet hits its lifespan limit it will be automatically killed.\r\n     * @type {number}\r\n     * @default\r\n     */\n\n    this.bulletLifespan = 0;\n    /**\r\n     * If you've set {@link #bulletKillType} to `consts.KILL_DISTANCE` this controls the distance\r\n     * the Bullet can travel before it is automatically killed. The distance is given in pixels.\r\n     * @type {number}\r\n     * @default\r\n     */\n\n    this.bulletKillDistance = 0;\n    /**\r\n     * This is the amount of {@link Phaser.Physics.Arcade.Body#gravity} added to the Bullets physics body when fired.\r\n     * Gravity is expressed in pixels / second / second.\r\n     * @type {Phaser.Math.Vector2}\r\n     */\n\n    this.bulletGravity = new Phaser.Math.Vector2(0, 0);\n    /**\r\n     * Bullets can optionally adjust their rotation in-flight to match their velocity.\r\n     * This can create the effect of a bullet 'pointing' to the path it is following, for example\r\n     * an arrow being fired from a bow, and works especially well when added to {@link #bulletGravity}.\r\n     * @type {boolean}\r\n     * @default\r\n     */\n\n    this.bulletRotateToVelocity = false;\n    /**\r\n     * The Texture Key that the Bullets use when rendering.\r\n     * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\r\n     * @type {string}\r\n     * @default\r\n     */\n\n    this.bulletKey = key || '';\n    /**\r\n     * The Texture Frame that the Bullets use when rendering.\r\n     * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\r\n     * @type {string|integer}\r\n     * @default\r\n     */\n\n    this.bulletFrame = frame || '';\n    /**\r\n     * Private var that holds the public `bulletClass` property.\r\n     * @type {function}\r\n     * @private\r\n     */\n\n    this._bulletClass = Bullet;\n    /**\r\n     * Private var that holds the public `bulletCollideWorldBounds` property.\r\n     * @type {boolean}\r\n     * @private\r\n     */\n\n    this._bulletCollideWorldBounds = false;\n    /**\r\n     * Private var that holds the public `bulletKillType` property.\r\n     * @type {integer}\r\n     * @private\r\n     */\n\n    this._bulletKillType = consts.KILL_WORLD_BOUNDS;\n    /**\r\n     * Holds internal data about custom bullet body sizes.\r\n     *\r\n     * @type {Object}\r\n     * @private\r\n     */\n\n    this._data = {\n      customBody: false,\n      width: 0,\n      height: 0,\n      offsetX: 0,\n      offsetY: 0\n    };\n    /**\r\n     * This Rectangle defines the bounds that are used when determining if a Bullet should be killed or not.\r\n     * It's used in combination with {@link #bulletKillType} when that is set to either `consts.KILL_WEAPON_BOUNDS`\r\n     * or `consts.KILL_STATIC_BOUNDS`. If you are not using either of these kill types then the bounds are ignored.\r\n     * If you are tracking a Sprite or Point then the bounds are centered on that object every frame.\r\n     *\r\n     * @type {Phaser.Geom.Rectangle}\r\n     */\n\n    this.bounds = new Phaser.Geom.Rectangle();\n    /**\r\n     * The Rectangle used to calculate the bullet bounds from.\r\n     *\r\n     * @type {Phaser.Geom.Rectangle}\r\n     * @private\r\n     */\n\n    this.bulletBounds = this.scene.physics.world.bounds;\n    /**\r\n     * This array stores the frames added via @link #setBulletFrames.\r\n     *\r\n     * @type {Array}\r\n     * @protected\r\n     */\n\n    this.bulletFrames = [];\n    /**\r\n     * The index of the frame within {@link #bulletFrames} that is currently being used.\r\n     * This value is only used if {@link #bulletFrameCycle} is set to `true`.\r\n     * @type {number}\r\n     * @private\r\n     */\n\n    this.bulletFrameIndex = 0;\n    /**\r\n     * An internal object that stores the animation data added via {@link #addBulletAnimation}.\r\n     * @type {Object}\r\n     * @private\r\n     */\n\n    this.anims = {};\n    /**\r\n     * The Sprite currently being tracked by the Weapon, if any.\r\n     * This is set via the {@link #trackSprite} method.\r\n     *\r\n     * @type {Phaser.GameObjects.Sprite|Object}\r\n     */\n\n    this.trackedSprite = null;\n    /**\r\n     * The Pointer currently being tracked by the Weapon, if any.\r\n     * This is set via the {@link #trackPointer} method.\r\n     *\r\n     * @type {Phaser.Input.Pointer}\r\n     */\n\n    this.trackedPointer = null;\n    /**\r\n     * If you want this Weapon to be able to fire more than 1 bullet in a single\r\n     * update, then set this property to `true`. When `true` the Weapon plugin won't\r\n     * set the shot / firing timers until the `postRender` phase of the game loop.\r\n     * This means you can call `fire` (and similar methods) as often as you like in one\r\n     * single game update.\r\n     *\r\n     * @type {boolean}\r\n     * @default\r\n     */\n\n    this.multiFire = false;\n    /**\r\n     * Internal multiFire test flag.\r\n     *\r\n     * @type {boolean}\r\n     */\n\n    this._hasFired = false;\n    /**\r\n     * If the Weapon is tracking a Sprite, should it also track the Sprites rotation?\r\n     * This is useful for a game such as Asteroids, where you want the weapon to fire based\r\n     * on the sprites rotation.\r\n     *\r\n     * @type {boolean}\r\n     * @default\r\n     */\n\n    this.trackRotation = false;\n    /**\r\n     * The Track Offset is a Vector2 object that allows you to specify a pixel offset that bullets use\r\n     * when launching from a tracked Sprite or Pointer. For example if you've got a bullet that is 2x2 pixels\r\n     * in size, but you're tracking a Sprite that is 32x32, then you can set `trackOffset.x = 16` to have\r\n     * the bullet launched from the center of the Sprite.\r\n     *\r\n     * @type {Phaser.Math.Vector2}\r\n     */\n\n    this.trackOffset = new Phaser.Math.Vector2();\n    /**\r\n     * Internal firing rate time tracking variable.\r\n     *\r\n     * @type {number}\r\n     * @private\r\n     */\n\n    this._nextFire = 0;\n    /**\r\n     * Internal firing rate time tracking variable used by multiFire.\r\n     *\r\n     * @type {number}\r\n     * @private\r\n     */\n\n    this._tempNextFire = 0;\n    /**\r\n     * Internal firing rotation tracking point.\r\n     *\r\n     * @type {Phaser.Math.Vector2}\r\n     * @private\r\n     */\n\n    this._rotatedPoint = new Phaser.Math.Vector2();\n    this.eventEmitter = new Phaser.Events.EventEmitter();\n    this.createBullets(bulletLimit, key, frame, group);\n  }\n  /**\r\n   * This method performs two actions: First it will check to see if the\r\n   * {@link #bullets} Group exists or not, and if not it creates it, adding its\r\n   * children to the `group` given as the 4th argument.\r\n   *\r\n   * Then it will seed the bullet pool with the `quantity` number of Bullets,\r\n   * using the texture key and frame provided (if any).\r\n   *\r\n   * If for example you set the quantity to be 10, then this Weapon will only\r\n   * ever be able to have 10 bullets in-flight simultaneously. If you try to\r\n   * fire an 11th bullet then nothing will happen until one, or more, of the\r\n   * in-flight bullets have been killed, freeing them up for use by the Weapon\r\n   * again.\r\n   *\r\n   * If you do not wish to have a limit set, then pass in -1 as the quantity.\r\n   * In this instance the Weapon will keep increasing the size of the bullet\r\n   * pool as needed. It will never reduce the size of the pool however, so be\r\n   * careful it doesn't grow too large.\r\n   *\r\n   * You can either set the texture key and frame here, or via the\r\n   * {@link #bulletKey} and {@link #bulletFrame} properties. You can also\r\n   * animate bullets, or set them to use random frames. All Bullets belonging\r\n   * to a single Weapon instance must share the same texture key however.\r\n   *\r\n   * @param {integer} [quantity=1] - The quantity of bullets to seed the Weapon\r\n   *  with. If -1 it will set the pool to automatically expand.\r\n   * @param {string} [key] - The Game.cache key of the image that this Sprite\r\n   *  will use.\r\n   * @param {integer|string} [frame] - If the Sprite image contains multiple\r\n   *  frames you can specify which one to use here.\r\n   * @param {Phaser.GameObjects.Group} [group] - Optional Group to add the\r\n   *  object to. If not specified it will be added to the World group.\r\n   * @return {Weapon} This Weapon instance.\r\n   */\n\n\n  _createClass(Weapon, [{\n    key: \"createBullets\",\n    value: function createBullets(quantity, key, frame, group, bulletClass) {\n      if (quantity === undefined) {\n        quantity = 1;\n      }\n\n      if (bulletClass) {\n        this._bulletClass = bulletClass;\n      }\n      /*if (group === undefined) {\r\n        group = this.game.world;\r\n      }*/\n\n\n      if (this.bullets && !this.bullets.scene) {\n        this.bullets = null;\n      }\n\n      if (!this.bullets) {\n        this.bullets = this.scene.add.group({\n          classType: this._bulletClass,\n          maxSize: quantity,\n          runChildUpdate: true\n        });\n      }\n\n      if (quantity !== 0) {\n        if (quantity === -1) {\n          this.autoExpandBulletsGroup = true;\n          quantity = 1;\n        }\n\n        this.bullets.createMultiple({\n          key: key,\n          frame: frame,\n          repeat: quantity,\n          active: false,\n          visible: false\n        });\n        this.bullets.children.each(function (child) {\n          child.data.bulletManager = this;\n        }, this);\n        this.bulletKey = key;\n        this.bulletFrame = frame;\n\n        if (group) {\n          group.addMultiple(this.bullets.children.entries);\n        }\n      }\n\n      return this;\n    }\n    /**\r\n     * Call a function on each in-flight bullet in this Weapon.\r\n     *\r\n     * See {@link Phaser.GameObjects.Group#forEachExists forEachExists} for more details.\r\n     *\r\n     * @param {function} callback - The function that will be called for each applicable child. The child will be passed as the first argument.\r\n     * @param {object} callbackContext - The context in which the function should be called (usually 'this').\r\n     * @param {...any} [args=(none)] - Additional arguments to pass to the callback function, after the child item.\r\n     * @return {Weapon} This Weapon instance.\r\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback, callbackContext) {\n      var extraArgs = arguments;\n      this.bullets.children.each(function (child) {\n        if (child.active) {\n          callback.call(callbackContext, child, extraArgs);\n        }\n      });\n      return this;\n    }\n    /**\r\n     * Sets {@link Phaser.Physics.Arcade.Body#enable} to `false` on each bullet in this Weapon.\r\n     * This has the effect of stopping them in-flight should they be moving.\r\n     * It also stops them being able to be checked for collision.\r\n     *\r\n     * @return {Weapon} This Weapon instance.\r\n     */\n\n  }, {\n    key: \"pauseAll\",\n    value: function pauseAll() {\n      this.bullets.children.each(function (child) {\n        child.body.enable = false;\n\n        if (child.data.timeEvent !== null) {\n          child.data.timeEvent.paused = true;\n        }\n      }, this);\n      return this;\n    }\n    /**\r\n     * Sets {@link Phaser.Physics.Arcade.Body#enable} to `true` on each bullet in this Weapon.\r\n     * This has the effect of resuming their motion should they be in-flight.\r\n     * It also enables them for collision checks again.\r\n     *\r\n     * @return {Weapon} This Weapon instance.\r\n     */\n\n  }, {\n    key: \"resumeAll\",\n    value: function resumeAll() {\n      this.bullets.children.each(function (child) {\n        child.body.enable = true;\n\n        if (child.data.timeEvent !== null) {\n          child.data.timeEvent.paused = false;\n        }\n      }, this);\n      return this;\n    }\n    /**\r\n     * Calls {@link Phaser.Bullet#kill} on every in-flight bullet in this Weapon.\r\n     * Also re-enables their physics bodies, should they have been disabled via {@link #pauseAll}.\r\n     *\r\n     * @return {Weapon} This Weapon instance.\r\n     */\n\n  }, {\n    key: \"killAll\",\n    value: function killAll() {\n      this.bullets.children.each(function (child) {\n        if (child.active) {\n          child.kill();\n        }\n\n        child.body.enable = true;\n      });\n      return this;\n    }\n    /**\r\n     * Resets the {@link #shots} counter back to zero. This is used when you've set\r\n     * {@link #fireLimit} and have hit (or just wish to reset) your limit.\r\n     *\r\n     * @param {integer} [newLimit] - Optionally set a new {@link #fireLimit}.\r\n     * @return {Weapon} This Weapon instance.\r\n     */\n\n  }, {\n    key: \"resetShots\",\n    value: function resetShots(newLimit) {\n      this.shots = 0;\n\n      if (newLimit !== undefined) {\n        this.fireLimit = newLimit;\n      }\n\n      return this;\n    }\n    /**\r\n     * Sets this Weapon to track the given Sprite, or any Object with a public {@link Phaser.Component.Core#world world} Point object.\r\n     * When a Weapon tracks a Sprite it will automatically update its {@link #fireFrom} value to match the Sprite's\r\n     * position within the Game World, adjusting the coordinates based on the offset arguments.\r\n     *\r\n     * This allows you to lock a Weapon to a Sprite, so that bullets are always launched from its location.\r\n     *\r\n     * Calling `trackSprite` will reset {@link #trackedPointer} to null, should it have been set, as you can\r\n     * only track _either_ a Sprite, or a Pointer, at once, but not both.\r\n     *\r\n     * @param {Phaser.GameObjects.Sprite|Object} sprite - The Sprite to track the position of.\r\n     * @param {integer} [offsetX=0] - The horizontal offset from the Sprites position to be applied to the Weapon.\r\n     * @param {integer} [offsetY=0] - The vertical offset from the Sprites position to be applied to the Weapon.\r\n     * @param {boolean} [trackRotation=false] - Should the Weapon also track the Sprites rotation?\r\n     * @return {Weapon} This Weapon instance.\r\n     */\n\n  }, {\n    key: \"trackSprite\",\n    value: function trackSprite(sprite, offsetX, offsetY, trackRotation) {\n      if (offsetX === undefined) {\n        offsetX = 0;\n      }\n\n      if (offsetY === undefined) {\n        offsetY = 0;\n      }\n\n      if (trackRotation === undefined) {\n        trackRotation = false;\n      }\n\n      this.trackedPointer = null;\n      this.trackedSprite = sprite;\n      this.trackRotation = trackRotation;\n      this.trackOffset.set(offsetX, offsetY);\n      return this;\n    }\n    /**\r\n     * Sets this Weapon to track the given Pointer.\r\n     * When a Weapon tracks a Pointer it will automatically update its {@link #fireFrom} value to match the Pointer's\r\n     * position within the Game World, adjusting the coordinates based on the offset arguments.\r\n     *\r\n     * This allows you to lock a Weapon to a Pointer, so that bullets are always launched from its location.\r\n     *\r\n     * Calling `trackPointer` will reset {@link #trackedSprite} to null, should it have been set, as you can\r\n     * only track _either_ a Pointer, or a Sprite, at once, but not both.\r\n     *\r\n     * @param {Phaser.Input.Pointer} [pointer] - The Pointer to track the position of. Defaults to `Input.activePointer` if not specified.\r\n     * @param {integer} [offsetX=0] - The horizontal offset from the Pointers position to be applied to the Weapon.\r\n     * @param {integer} [offsetY=0] - The vertical offset from the Pointers position to be applied to the Weapon.\r\n     * @return {Weapon} This Weapon instance.\r\n     */\n\n  }, {\n    key: \"trackPointer\",\n    value: function trackPointer(pointer, offsetX, offsetY) {\n      if (pointer === undefined && this.scene.input) {\n        pointer = this.scene.input.activePointer;\n      }\n\n      if (offsetX === undefined) {\n        offsetX = 0;\n      }\n\n      if (offsetY === undefined) {\n        offsetY = 0;\n      }\n\n      this.trackedPointer = pointer;\n      this.trackedSprite = null;\n      this.trackRotation = false;\n      this.trackOffset.set(offsetX, offsetY);\n      return this;\n    }\n    /**\r\n     * Attempts to fire multiple bullets from the positions defined in the given array.\r\n     *\r\n     * If you provide a `from` argument, or if there is a tracked Sprite or Pointer, then\r\n     * the positions are treated as __offsets__ from the given objects position.\r\n     *\r\n     * If `from` is undefined, and there is no tracked object, then the bullets are fired\r\n     * from the given positions, as they exist in the world.\r\n     *\r\n     * Calling this method sets {@link #multiFire} to `true`.\r\n     *\r\n     * If there are not enough bullets available in the pool, and the pool cannot be extended,\r\n     * then this method may not fire from all of the given positions.\r\n     *\r\n     * When the bullets are launched they have their texture and frame updated, as required.\r\n     * The velocity of the bullets are calculated based on Weapon properties like {@link #bulletSpeed}.\r\n     *\r\n     * @param {array} positions - An array of positions. Each position can be any Object, as long as it has public `x` and `y` properties, such as Phaser.Point, { x: 0, y: 0 }, Phaser.Sprite, etc.\r\n     * @param {Phaser.GameObject.Sprite|Phaser.Math.Vector2|Object|string} [from] - Optionally fires the bullets **from** the `x` and `y` properties of this object, _instead_ of any {@link #trackedSprite} or `trackedPointer` that is set.\r\n     * @return {array} An array containing all of the fired Phaser.Bullet objects, if a launch was successful, otherwise an empty array.\r\n     */\n\n  }, {\n    key: \"fireMany\",\n    value: function fireMany(positions, from) {\n      var _this = this;\n\n      this.multiFire = true;\n      var bullets = [];\n\n      if (from || this.trackedSprite || this.trackedPointer) {\n        positions.forEach(function (offset) {\n          bullets.push(_this.fire(from, null, null, offset.x, offset.y));\n        });\n      } else {\n        positions.forEach(function (position) {\n          bullets.push(_this.fire(position));\n        });\n      }\n\n      return bullets;\n    }\n    /**\r\n     * Attempts to fire a single Bullet from a tracked Sprite or Pointer, but applies an offset\r\n     * to the position first. This is the same as calling {@link #fire} and passing in the offset arguments.\r\n     *\r\n     * If there are no more bullets available in the pool, and the pool cannot be extended,\r\n     * then this method returns `null`. It will also return `null` if not enough time has expired since the last time\r\n     * the Weapon was fired, as defined in the {@link #fireRate} property.\r\n     *\r\n     * Otherwise the first available bullet is selected, launched, and returned.\r\n     *\r\n     * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\r\n     * calculated based on Weapon properties like {@link #bulletSpeed}.\r\n     *\r\n     * If you wish to fire multiple bullets in a single game update, then set {@link #multiFire} to `true`\r\n     * and you can call this method as many times as you like, per loop. See also {@link #fireMany}.\r\n     *\r\n     * @param {number} [offsetX=0] - The horizontal offset from the position of the tracked Sprite or Pointer, as set with {@link #trackSprite}.\r\n     * @param {number} [offsetY=0] - The vertical offset from the position of the tracked Sprite or Pointer, as set with {@link #trackSprite}.\r\n     * @return {Bullet} The fired bullet, if a launch was successful, otherwise `null`.\r\n     */\n\n  }, {\n    key: \"fireOffset\",\n    value: function fireOffset(offsetX, offsetY) {\n      if (offsetX === undefined) {\n        offsetX = 0;\n      }\n\n      if (offsetY === undefined) {\n        offsetY = 0;\n      }\n\n      return this.fire(null, null, null, offsetX, offsetY);\n    }\n    /**\r\n     * Fires a bullet **at** the given Pointer. The bullet will be launched from the {@link #fireFrom} position,\r\n     * or from a Tracked Sprite or Pointer, if you have one set.\r\n     *\r\n     * @param {Phaser.Input.Pointer} [pointer] - The Pointer to fire the bullet towards.\r\n     * @return {Bullet} The fired bullet if successful, null otherwise.\r\n     */\n\n  }, {\n    key: \"fireAtPointer\",\n    value: function fireAtPointer(pointer) {\n      if (pointer === undefined && this.scene.input) {\n        pointer = this.scene.input.activePointer;\n      }\n\n      return this.fire(null, pointer.x, pointer.y);\n    }\n    /**\r\n     * Fires a bullet **at** the given Sprite. The bullet will be launched from the {@link #fireFrom} position,\r\n     * or from a Tracked Sprite or Pointer, if you have one set.\r\n     *\r\n     * @param {Phaser.GameObjects.Sprite} [sprite] - The Sprite to fire the bullet towards.\r\n     * @return {Bullet} The fired bullet if successful, null otherwise.\r\n     */\n\n  }, {\n    key: \"fireAtSprite\",\n    value: function fireAtSprite(sprite) {\n      return this.fire(null, sprite.x, sprite.y);\n    }\n    /**\r\n     * Fires a bullet **at** the given coordinates. The bullet will be launched from the {@link #fireFrom} position,\r\n     * or from a Tracked Sprite or Pointer, if you have one set.\r\n     *\r\n     * @param {number} [x] - The x coordinate, in world space, to fire the bullet towards.\r\n     * @param {number} [y] - The y coordinate, in world space, to fire the bullet towards.\r\n     * @return {Bullet} The fired bullet if successful, null otherwise.\r\n     */\n\n  }, {\n    key: \"fireAtXY\",\n    value: function fireAtXY(x, y) {\n      return this.fire(null, x, y);\n    }\n    /**\r\n     * Attempts to fire a single Bullet. If there are no more bullets available in the pool, and the pool cannot be extended,\r\n     * then this method returns `null`. It will also return `null` if not enough time has expired since the last time\r\n     * the Weapon was fired, as defined in the {@link #fireRate} property.\r\n     *\r\n     * Otherwise the first available bullet is selected, launched, and returned.\r\n     *\r\n     * The arguments are all optional, but allow you to control both where the bullet is launched from, and aimed at.\r\n     *\r\n     * If you don't provide any of the arguments then it uses those set via properties such as {@link #trackedSprite},\r\n     * {@link #bulletAngle} and so on.\r\n     *\r\n     * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\r\n     * calculated based on Weapon properties like `bulletSpeed`.\r\n     *\r\n     * If you wish to fire multiple bullets in a single game update, then set `Weapon.multiFire = true`\r\n     * and you can call `fire` as many times as you like, per loop. Multiple fires in a single update\r\n     * only counts once towards the `shots` total, but you will still receive a Signal for each bullet.\r\n     *\r\n     * @param {Phaser.GameObjects.Sprite|Phaser.Math.Vector2|Object|string} [from] - Optionally fires the bullet **from** the `x` and `y` properties of this object. If set this overrides {@link #trackedSprite} or `trackedPointer`. Pass `null` to ignore it.\r\n     * @param {number} [x] - The x coordinate, in world space, to fire the bullet **towards**. If left as `undefined`, or `null`, the bullet direction is based on its angle.\r\n     * @param {number} [y] - The y coordinate, in world space, to fire the bullet **towards**. If left as `undefined`, or `null`, the bullet direction is based on its angle.\r\n     * @param {number} [offsetX=0] - If the bullet is fired from a tracked Sprite or Pointer, or the `from` argument is set, this applies a horizontal offset from the launch position.\r\n     * @param {number} [offsetY=0] - If the bullet is fired from a tracked Sprite or Pointer, or the `from` argument is set, this applies a vertical offset from the launch position.\r\n     * @return {Bullet} The fired bullet, if a launch was successful, otherwise `null`.\r\n     */\n\n  }, {\n    key: \"fire\",\n    value: function fire(from, x, y, offsetX, offsetY) {\n      if (x === undefined) {\n        x = null;\n      }\n\n      if (y === undefined) {\n        y = null;\n      }\n\n      if (this.scene.time.now < this._nextFire || this.fireLimit > 0 && this.shots === this.fireLimit) {\n        return null;\n      }\n\n      var speed = this.bulletSpeed; //  Apply +- speed variance\n\n      if (this.bulletSpeedVariance !== 0) {\n        speed += Phaser.Math.Between(-this.bulletSpeedVariance, this.bulletSpeedVariance);\n      }\n\n      if (from) {\n        if (this.fireFrom.width > 1) {\n          this.fireFrom.CenterOn(from.x, from.y);\n        } else {\n          this.fireFrom.x = from.x;\n          this.fireFrom.y = from.y;\n        }\n      } else if (this.trackedSprite) {\n        if (this.trackRotation) {\n          this._rotatedPoint.set(this.trackedSprite.x + this.trackOffset.x, this.trackedSprite.y + this.trackOffset.y);\n\n          Phaser.Math.RotateAround(this._rotatedPoint, this.trackedSprite.x, this.trackedSprite.y, this.trackedSprite.rotation);\n\n          if (this.fireFrom.width > 1) {\n            this.fireFrom.CenterOn(this._rotatedPoint.x, this._rotatedPoint.y);\n          } else {\n            this.fireFrom.x = this._rotatedPoint.x;\n            this.fireFrom.y = this._rotatedPoint.y;\n          }\n        } else if (this.fireFrom.width > 1) {\n          this.fireFrom.CenterOn(this.trackedSprite.x + this.trackOffset.x, this.trackedSprite.y + this.trackOffset.y);\n        } else {\n          this.fireFrom.x = this.trackedSprite.x + this.trackOffset.x;\n          this.fireFrom.y = this.trackedSprite.y + this.trackOffset.y;\n        }\n\n        if (this.bulletInheritSpriteSpeed) {\n          speed += this.trackedSprite.body.speed;\n        }\n      } else if (this.trackedPointer) {\n        if (this.fireFrom.width > 1) {\n          this.fireFrom.CenterOn(this.trackedPointer.x + this.trackOffset.x, this.trackedPointer.y + this.trackOffset.y);\n        } else {\n          this.fireFrom.x = this.trackedPointer.x + this.trackOffset.x;\n          this.fireFrom.y = this.trackedPointer.y + this.trackOffset.y;\n        }\n      }\n\n      if (offsetX !== undefined) {\n        this.fireFrom.x += offsetX;\n      }\n\n      if (offsetY !== undefined) {\n        this.fireFrom.y += offsetY;\n      }\n\n      var randomX = this.fireFrom.x + Math.random() * this.fireFrom.width;\n      var randomY = this.fireFrom.y + Math.random() * this.fireFrom.height;\n      var fromX = this.fireFrom.width > 1 ? randomX : this.fireFrom.x;\n      var fromY = this.fireFrom.height > 1 ? randomY : this.fireFrom.y;\n      var angle = this.trackRotation ? this.trackedSprite.angle : this.fireAngle; //  The position (in world space) to fire the bullet towards, if set\n\n      if (x !== null && y !== null) {\n        angle = Phaser.Math.RadToDeg(Math.atan2(y - fromY, x - fromX));\n      } //  Apply +- angle variance\n\n\n      if (this.bulletAngleVariance !== 0) {\n        angle += Phaser.Math.Between(-this.bulletAngleVariance, this.bulletAngleVariance);\n      }\n\n      var moveX = 0;\n      var moveY = 0; //  Avoid sin/cos for right-angled shots\n\n      if (angle === 0 || angle === 180) {\n        moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n      } else if (angle === 90 || angle === 270) {\n        moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n      } else {\n        moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\n        moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\n      }\n\n      var bullet = null;\n\n      if (this.autoExpandBulletsGroup) {\n        bullet = this.bullets.getFirstDead(true, fromX, fromY, this.bulletKey, this.bulletFrame);\n        bullet.data.bulletManager = this;\n      } else {\n        bullet = this.bullets.getFirstDead(false);\n      }\n\n      if (bullet) {\n        bullet.prepare(fromX, fromY);\n        bullet.data.fromX = fromX;\n        bullet.data.fromY = fromY;\n        bullet.data.killType = this.bulletKillType;\n        bullet.data.killDistance = this.bulletKillDistance;\n        bullet.data.rotateToVelocity = this.bulletRotateToVelocity;\n\n        if (this.bulletKillType === consts.KILL_LIFESPAN) {\n          if (this.bulletLifespan <= 0) {\n            throw new Error('Invalid bulletLifespan; must be > 0');\n          }\n\n          bullet.data.timeEvent = this.scene.time.addEvent({\n            delay: this.bulletLifespan,\n            // TODO: test to see if we can just pass callbackContext: bullet and\n            // have it work. no need to re-bind every time we fire a bullet\n            callback: bullet.kill.bind(bullet)\n          });\n          bullet.lifespan = this.bulletLifespan;\n        }\n\n        bullet.angle = angle + this.bulletAngleOffset; //  Frames and Animations\n\n        if (this.bulletAnimation) {\n          bullet.anims.play(this.bulletAnimation);\n        } else if (this.bulletFrameCycle) {\n          if (this.bulletFrameIndex >= this.bulletFrames.length) {\n            this.bulletFrameIndex = 0;\n          }\n\n          bullet.setTexture(this.bulletKey, this.bulletFrameIndex);\n          this.bulletFrameIndex++;\n        } else if (this.bulletFrameRandom) {\n          var nextFrame = Math.floor(Math.random() * this.bulletFrames.length);\n          bullet.setTexture(this.bulletKey, nextFrame);\n        }\n\n        if (bullet.data.bodyDirty) {\n          if (this._data.customBody) {\n            bullet.body.setSize(this._data.width, this._data.height);\n            bullet.body.setOffset(this._data.offsetX, this._data.offsetY);\n          }\n\n          bullet.body.collideWorldBounds = this.bulletCollideWorldBounds;\n          bullet.data.bodyDirty = false;\n        }\n\n        bullet.body.setVelocity(moveX, moveY);\n        bullet.body.setGravity(this.bulletGravity.x, this.bulletGravity.y);\n        var next = 0;\n\n        if (this.bulletSpeedVariance !== 0) {\n          var rate = this.fireRate;\n          rate += Phaser.Math.Between(-this.fireRateVariance, this.fireRateVariance);\n\n          if (rate < 0) {\n            rate = 0;\n          }\n\n          next = this.scene.time.now + rate;\n        } else {\n          next = this.scene.time.now + this.fireRate;\n        }\n\n        if (this.multiFire) {\n          if (!this._hasFired) {\n            //  We only add 1 to the 'shots' count for multiFire shots\n            this._hasFired = true;\n            this._tempNextFire = next;\n            this.shots++;\n          }\n        } else {\n          this._nextFire = next;\n          this.shots++;\n        }\n\n        this.eventEmitter.emit('fire', bullet, this, speed);\n\n        if (this.fireLimit > 0 && this.shots === this.fireLimit) {\n          this.eventEmitter('firelimit', this, this.fireLimit);\n        }\n      }\n\n      return bullet;\n    }\n    /**\r\n     * You can modify the size of the physics Body the Bullets use to be any dimension you need.\r\n     * This allows you to make it smaller, or larger, than the parent Sprite.\r\n     * You can also control the x and y offset of the Body. This is the position of the\r\n     * Body relative to the top-left of the Sprite _texture_.\r\n     *\r\n     * For example: If you have a Sprite with a texture that is 80x100 in size,\r\n     * and you want the physics body to be 32x32 pixels in the middle of the texture, you would do:\r\n     *\r\n     * `setSize(32 / Math.abs(this.scale.x), 32 / Math.abs(this.scale.y), 24, 34)`\r\n     *\r\n     * Where the first two parameters are the new Body size (32x32 pixels) relative to the Sprite's scale.\r\n     * 24 is the horizontal offset of the Body from the top-left of the Sprites texture, and 34\r\n     * is the vertical offset.\r\n     *\r\n     * @param {number} width - The width of the Body.\r\n     * @param {number} height - The height of the Body.\r\n     * @param {number} [offsetX] - The X offset of the Body from the top-left of the Sprites texture.\r\n     * @param {number} [offsetY] - The Y offset of the Body from the top-left of the Sprites texture.\r\n     * @return {Weapon} The Weapon Plugin.\r\n     */\n\n  }, {\n    key: \"setBulletBodyOffset\",\n    value: function setBulletBodyOffset(width, height, offsetX, offsetY) {\n      if (offsetX === undefined) {\n        offsetX = 0;\n      }\n\n      if (offsetY === undefined) {\n        offsetY = 0;\n      }\n\n      this._data.customBody = true;\n      this._data.width = width;\n      this._data.height = height;\n      this._data.offsetX = offsetX;\n      this._data.offsetY = offsetY; //  Update all bullets in the pool\n\n      this.bullets.children.each(function (child) {\n        child.body.setSize(width, height);\n        child.body.setOffset(offsetX, offsetY);\n      }); //this.bullets.setAll('data.bodyDirty', false);\n\n      return this;\n    }\n    /**\r\n     * Sets the texture frames that the bullets can use when being launched.\r\n     *\r\n     * This is intended for use when you've got numeric based frames, such as\r\n     * those loaded via a Sprite Sheet.\r\n     *\r\n     * It works by calling `Phaser.Utils.Array.NumberArray` internally, using\r\n     * the min and max values provided. Then it sets the frame index to be zero.\r\n     *\r\n     * You can optionally set the cycle and random booleans, to allow bullets to\r\n     * cycle through the frames when they're fired, or pick one at random.\r\n     *\r\n     * @param {integer} min - The minimum value the frame can be. Usually zero.\r\n     * @param {integer} max - The maximum value the frame can be.\r\n     * @param {integer} [selcetionMethod=BULLET_FRAME_STABLE] - Specifies how the\r\n     *  frame for the fired bullet will be selected. See consts.BULLET_FRAME_XYZ\r\n     *  for options.\r\n     * @return {Weapon} The Weapon Plugin.\r\n     */\n\n  }, {\n    key: \"setBulletFrames\",\n    value: function setBulletFrames(min, max, selectionMethod) {\n      if (selectionMethod === undefined) {\n        selectionMethod = consts.BULLET_FRAME_STABLE;\n      }\n\n      if (typeof selectionMethod !== 'number' || selectionMethod < consts.BULLET_FRAME_STABLE || selectionMethod > consts.BULLET_FRAME_RANDOM) {\n        throw new Error(\"Invalid bullet frame selection method specified: \".concat(selectionMethod));\n      }\n\n      if (min > max) {\n        throw new Error(\"min frame (\".concat(min, \") must be <= max frame \").concat(max));\n      }\n\n      this.bulletFrames = Phaser.Utils.Array.NumberArray(min, max);\n      this.bulletFrameIndex = 0;\n      this.bulletFrameCycle = selectionMethod === consts.BULLET_FRAME_CYCLE;\n      this.bulletFrameRandom = selectionMethod === consts.BULLET_FRAME_RANDOM;\n      return this;\n    }\n    /**\r\n     * Adds a new animation under the given key. Optionally set the frames, frame rate and loop.\r\n     * The arguments are all the same as for `Animation.add`, and work in the same way.\r\n     *\r\n     * {@link #bulletAnimation} will be set to this animation after it's created. From that point on, all\r\n     * bullets fired will play using this animation. You can swap between animations by calling this method\r\n     * several times, and then just changing the {@link #bulletAnimation} property to the name of the animation\r\n     * you wish to play for the next launched bullet.\r\n     *\r\n     * If you wish to stop using animations at all, set {@link #bulletAnimation} to '' (an empty string).\r\n     *\r\n     * @param {string} name - The unique (within the Weapon instance) name for the animation, i.e. \"fire\", \"blast\".\r\n     * @param {Array} [frames=null] - An array of numbers/strings that correspond to the frames to add to this animation and in which order. e.g. [1, 2, 3] or ['run0', 'run1', run2]). If null then all frames will be used.\r\n     * @param {number} [frameRate=60] - The speed at which the animation should play. The speed is given in frames per second.\r\n     * @param {number} [loop=1] - Number of times to repeat the animation. Set to -1 to repeat forever.\r\n     * @return {Weapon} The Weapon Plugin.\r\n     */\n\n  }, {\n    key: \"addBulletAnimation\",\n    value: function addBulletAnimation(name, frames, frameRate, loop) {\n      if (!this.scene.sys.anims.anims.contains(name)) {\n        this.scene.sys.anims.create({\n          key: name,\n          frames: frames,\n          frameRate: frameRate,\n          loop: loop\n        });\n        this.anims[name] = this.scene.sys.anims.anims.entries[name];\n      }\n\n      this.bulletAnimation = name;\n      return this;\n    }\n    /**\r\n     * Uses `Game.Debug` to draw some useful information about this Weapon, including the number of bullets\r\n     * both in-flight, and available. And optionally the physics debug bodies of the bullets.\r\n     *\r\n     * @param {integer} [x=16] - The coordinate, in screen space, at which to draw the Weapon debug data.\r\n     * @param {integer} [y=32] - The coordinate, in screen space, at which to draw the Weapon debug data.\r\n     * @param {boolean} [debugBodies=false] - Optionally draw the physics body of every bullet in-flight.\r\n     */\n\n  }, {\n    key: \"debug\",\n    value: function debug(x, y, debugBodies) {}\n    /*if (x === undefined) {\r\n      x = 16;\r\n    }\r\n    if (y === undefined) {\r\n      y = 32;\r\n    }\r\n    if (debugBodies === undefined) {\r\n      debugBodies = false;\r\n    }\r\n      this.game.debug.text('Weapon Plugin', x, y);\r\n    this.game.debug.text(\r\n      'Bullets Alive: ' + this.bullets.total + ' - Total: ' + this.bullets.length,\r\n      x,\r\n      y + 24\r\n    );\r\n      if (debugBodies) {\r\n      this.bullets.forEachExists(this.game.debug.body, this.game.debug, 'rgba(255, 0, 255, 0.8)');\r\n    }*/\n\n    /**\r\n     * Internal update method, called by the Weapon Plugin.\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (this._bulletKillType === consts.KILL_WEAPON_BOUNDS) {\n        if (this.trackedSprite) {\n          this.trackedSprite.updateTransform();\n          this.bounds.centerOn(this.trackedSprite.x, this.trackedSprite.y);\n        } else if (this.trackedPointer) {\n          this.bounds.centerOn(this.trackedPointer.x, this.trackedPointer.y);\n        }\n      }\n\n      if (this.autofire) {\n        this.fire();\n      }\n    }\n    /**\r\n     * Internal update method, called by the Weapon Plugin.\r\n     *\r\n     * @protected\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: \"postRender\",\n    value: function postRender() {\n      if (!this.multiFire || !this._hasFired) {\n        return;\n      }\n\n      this._hasFired = false;\n      this._nextFire = this._tempNextFire;\n    }\n    /**\r\n     * Destroys this Weapon.\r\n     * You must release everything in here, all references, all objects, free it all up.\r\n     * @returns {void}\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.scene = null;\n      this.bullets.destroy(true);\n    }\n  }]);\n\n  return Weapon;\n}();\n/**\r\n * The Class of the bullets that are launched by this Weapon. Defaults to {@link Phaser.Bullet}, but can be\r\n * overridden before calling `createBullets` and set to your own class type.\r\n *\r\n * It should be a constructor function accepting `(game, x, y, key, frame)`.\r\n *\r\n * @name Weapon#bulletClass\r\n * @property {function} bulletClass\r\n */\n\n\nObject.defineProperty(Weapon.prototype, 'bulletClass', {\n  get: function get() {\n    return this._bulletClass;\n  },\n  set: function set(classType) {\n    this._bulletClass = classType; // `this.bullets` exists only after createBullets()\n\n    if (this.bullets) {\n      this.bullets.classType = this._bulletClass;\n    }\n  }\n});\n/**\r\n * This controls how the bullets will be killed. The default is `consts.KILL_WORLD_BOUNDS`.\r\n *\r\n * There are 7 different \"kill types\" available:\r\n *\r\n * * `consts.KILL_NEVER`\r\n * The bullets are never destroyed by the Weapon. It's up to you to destroy them via your own code.\r\n *\r\n * * `consts.KILL_LIFESPAN`\r\n * The bullets are automatically killed when their `bulletLifespan` amount expires.\r\n *\r\n * * `consts.KILL_DISTANCE`\r\n * The bullets are automatically killed when they exceed `bulletDistance` pixels away from their original launch position.\r\n *\r\n * * `consts.KILL_WEAPON_BOUNDS`\r\n * The bullets are automatically killed when they no longer intersect with the {@link #bounds} rectangle.\r\n *\r\n * * `consts.KILL_CAMERA_BOUNDS`\r\n * The bullets are automatically killed when they no longer intersect with the {@link Phaser.Camera#bounds} rectangle.\r\n *\r\n * * `consts.KILL_WORLD_BOUNDS`\r\n * The bullets are automatically killed when they no longer intersect with the {@link Phaser.World#bounds} rectangle.\r\n *\r\n * * `consts.KILL_STATIC_BOUNDS`\r\n * The bullets are automatically killed when they no longer intersect with the {@link #bounds} rectangle.\r\n * The difference between static bounds and weapon bounds, is that a static bounds will never be adjusted to\r\n * match the position of a tracked sprite or pointer.\r\n *\r\n * @name Weapon#bulletKillType\r\n * @property {integer} bulletKillType\r\n */\n\nObject.defineProperty(Weapon.prototype, 'bulletKillType', {\n  get: function get() {\n    return this._bulletKillType;\n  },\n  set: function set(type) {\n    switch (type) {\n      case consts.KILL_STATIC_BOUNDS:\n      case consts.KILL_WEAPON_BOUNDS:\n        this.bulletBounds = this.bounds;\n        break;\n\n      case consts.KILL_CAMERA_BOUNDS:\n        this.bulletBounds = this.scene.sys.cameras.main._bounds;\n        break;\n\n      case consts.KILL_WORLD_BOUNDS:\n        this.bulletBounds = this.scene.physics.world.bounds;\n        break;\n    }\n\n    this._bulletKillType = type;\n  }\n});\n/**\r\n * Should bullets collide with the World bounds or not?\r\n *\r\n * @name Weapon#bulletCollideWorldBounds\r\n * @property {boolean} bulletCollideWorldBounds\r\n */\n\nObject.defineProperty(Weapon.prototype, 'bulletCollideWorldBounds', {\n  get: function get() {\n    return this._bulletCollideWorldBounds;\n  },\n  set: function set(value) {\n    this._bulletCollideWorldBounds = value;\n    this.bullets.children.each(function (child) {\n      child.body.collideWorldBounds = value;\n      child.data.bodyDirty = false;\n    });\n  }\n});\n/**\r\n * The x coordinate from which bullets are fired. This is the same as `Weapon.fireFrom.x`, and\r\n * can be overridden by the {@link #fire} arguments.\r\n *\r\n * @name Weapon#x\r\n * @property {number} x\r\n */\n\nObject.defineProperty(Weapon.prototype, 'x', {\n  get: function get() {\n    return this.fireFrom.x;\n  },\n  set: function set(value) {\n    this.fireFrom.x = value;\n  }\n});\n/**\r\n * The y coordinate from which bullets are fired. This is the same as `Weapon.fireFrom.y`, and\r\n * can be overridden by the {@link #fire} arguments.\r\n *\r\n * @name Weapon#y\r\n * @property {number} y\r\n */\n\nObject.defineProperty(Weapon.prototype, 'y', {\n  get: function get() {\n    return this.fireFrom.y;\n  },\n  set: function set(value) {\n    this.fireFrom.y = value;\n  }\n});\nmodule.exports = Weapon;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// WeaponPlugin.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f9de60b886aa54024abd","module.exports = {\r\n  /**\r\n   * A {@link #bulletKillType} constant that stops the bullets from ever being destroyed automatically.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  KILL_NEVER: 0,\r\n\r\n  /**\r\n   * A {@link #bulletKillType} constant that automatically kills the bullets when their {@link #bulletLifespan} expires.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  KILL_LIFESPAN: 1,\r\n\r\n  /**\r\n   * A {@link #bulletKillType} constant that automatically kills the bullets after they\r\n   * exceed the {@link #bulletDistance} from their original firing position.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  KILL_DISTANCE: 2,\r\n\r\n  /**\r\n   * A {@link #bulletKillType} constant that automatically kills the bullets when they leave the {@link #bounds} rectangle.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  KILL_WEAPON_BOUNDS: 3,\r\n\r\n  /**\r\n   * A {@link #bulletKillType} constant that automatically kills the bullets when they leave the {@link Phaser.Camera#bounds} rectangle.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  KILL_CAMERA_BOUNDS: 4,\r\n\r\n  /**\r\n   * A {@link #bulletKillType} constant that automatically kills the bullets when they leave the {@link Phaser.World#bounds} rectangle.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  KILL_WORLD_BOUNDS: 5,\r\n\r\n  /**\r\n   * A {@link #bulletKillType} constant that automatically kills the bullets when they leave the {@link #bounds} rectangle.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  KILL_STATIC_BOUNDS: 6,\r\n\r\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face up.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  ANGLE_UP: 270,\r\n\r\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face down.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  ANGLE_DOWN: 90,\r\n\r\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face left.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  ANGLE_LEFT: 180,\r\n\r\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face right.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  ANGLE_RIGHT: 0,\r\n\r\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north east.\r\n   * @constant Phaser.ANGLE_NORTH_EAST\r\n   * @type {integer}\r\n   */\r\n  ANGLE_NORTH_EAST: 315,\r\n\r\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face north west.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  ANGLE_NORTH_WEST: 225,\r\n\r\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south east.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  ANGLE_SOUTH_EAST: 45,\r\n\r\n  /**\r\n   * The Angle (in degrees) a Game Object needs to be set to in order to face south west.\r\n   * @constant\r\n   * @type {integer}\r\n   */\r\n  ANGLE_SOUTH_WEST: 135,\r\n\r\n  /**\r\n   * When selecting a bullet frame the same frame should always be used. This\r\n   * is the default value.\r\n   * @constant\r\n   * @type { integer }\r\n   */\r\n  BULLET_FRAME_STABLE: 0,\r\n\r\n  /**\r\n   * When selecting a bullet frame the next frame should be used\r\n   * @constant\r\n   * @type { integer }\r\n   */\r\n  BULLET_FRAME_CYCLE: 1,\r\n\r\n  /**\r\n   * When selecting a bullet frame a random frame should be used.\r\n   * @constant\r\n   * @type { integer }\r\n   */\r\n  BULLET_FRAME_RANDOM: 2,\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./consts.js","/**\r\n * @author       Patrick Sletvold\r\n * @author       jdotr <https://github.com/jdotrjs>\r\n * @author       Richard Davey\r\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\r\n */\r\n\r\nconst consts = require('./consts');\r\n\r\nlet bulletID = 0\r\n\r\nclass Bullet extends Phaser.GameObjects.Sprite {\r\n  /**\r\n   * Create a new `Bullet` object. Bullets are used by the `Weapon` class, and are normal Sprites,\r\n   * with a few extra properties in the data object to handle Weapon specific features.\r\n   *\r\n   * @param {Phaser.Scene} scene - A reference to the currently running scene.\r\n   * @param {number} x - The x coordinate (in world space) to position the Particle at.\r\n   * @param {number} y - The y coordinate (in world space) to position the Particle at.\r\n   * @param {string} key - This is the image or texture used by the Particle during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.\r\n   * @param {string|number} frame - If this Particle is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.\r\n   */\r\n  constructor(scene, x, y, key, frame) {\r\n    super(scene, x, y, key, frame);\r\n    this.bulletID = bulletID\r\n    bulletID++\r\n    this.scene.physics.add.existing(this);\r\n\r\n    this.data = {\r\n      timeEvent: null,\r\n      bulletManager: null,\r\n      fromX: 0,\r\n      fromY: 0,\r\n      bodyDirty: true,\r\n      rotateToVelocity: false,\r\n      killType: 0,\r\n      killDistance: 0,\r\n      bodyBounds: new Phaser.Geom.Rectangle()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Prepares this bullet to be fired and interact with the rest of the scene\r\n   * again.\r\n   */\r\n  prepare(x, y) {\r\n    this.setActive(true);\r\n    this.setVisible(true);\r\n    this.body.enable = true;\r\n    this.body.reset(x, y);\r\n    this.body.debugShowBody = this.data.bulletManager.debugPhysics;\r\n    this.body.debugShowVelocity = this.data.bulletManager.debugPhysics;\r\n  }\r\n\r\n  /**\r\n   * Kills the Bullet, freeing it up for re-use by the Weapon bullet pool.\r\n   * Also dispatches the `Weapon`s kill signal.\r\n   * @returns {Bullet} This instance of the bullet class\r\n   */\r\n  kill() {\r\n    // Reproduce Phaser.Physics.Arcade.Components.Enable.disableBody because\r\n    // we can't assume that the bullet class has it built in.\r\n    this.body.stop();\r\n    this.body.enable = false;\r\n    this.setActive(false);\r\n    this.setVisible(false);\r\n    this.body.debugShowBody = false;\r\n    this.body.debugShowVelocity = false;\r\n\r\n    // TODO: potentially we don't need to destroy the time event and we can\r\n    // just pause when the bullet is killed and restart it when it's refired.\r\n    // For now though do the simple thing and discard it.\r\n    // Another option would be to use Date.now() and manually process pause\r\n    // events with a flag and some math.\r\n    // Both of those are probably premature optimizations.\r\n    if (this.data.timeEvent !== null) {\r\n      this.data.timeEvent.destroy();\r\n      this.data.timeEvent = null;\r\n    }\r\n\r\n    this.data.bulletManager.eventEmitter.emit('kill', this);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the Bullet, killing as required.\r\n   * @returns {Bullet} This instance of the bullet class\r\n   */\r\n  update() {\r\n    if (!this.active) {\r\n      // this was previously a check to this.exists\r\n      return;\r\n    }\r\n\r\n    if (this.data.killType > consts.KILL_LIFESPAN) {\r\n      if (this.data.killType === consts.KILL_DISTANCE) {\r\n        if (\r\n          new Phaser.Math.Vector2(this.data.fromX, this.data.fromY).distance(this) >\r\n          this.data.killDistance\r\n        ) {\r\n          this.kill();\r\n        }\r\n      } else if (!Phaser.Geom.Intersects.RectangleToRectangle(\r\n          this.data.bulletManager.bulletBounds,\r\n          this.body.getBounds(this.data.bodyBounds)\r\n        )) {\r\n        this.kill();\r\n      }\r\n    }\r\n\r\n    if (this.data.rotateToVelocity) {\r\n      this.rotation = this.body.velocity.atan();\r\n    }\r\n\r\n    if (this.data.bulletManager.bulletWorldWrap) {\r\n      this.scene.physics.world.wrap(\r\n        this,\r\n        this.data.bulletManager.bulletWorldWrapPadding\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Bullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ./Bullet.js","/**\r\n * @author       Patrick Sletvold\r\n * @author       jdotr <https://github.com/jdotrjs>\r\n * @author       Richard Davey\r\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\r\n */\r\nconst Weapon = require('./Weapon');\r\nconst Bullet = require('./Bullet');\r\nconst consts = require('./consts');\r\n\r\n/**\r\n * The Weapon Plugin provides the ability to easily create a bullet pool\r\n * and manager.\r\n *\r\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\r\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\r\n * not currently work with Impact or Matter Physics.\r\n *\r\n * The Bullets are created inside of {@link #bullets weapon.bullets}, which is\r\n * a {@link Phaser.GameObjects.Group} instance. Anything you can usually do\r\n * with a Group, such as move it around the display list, iterate it, etc can\r\n * be done to the bullets Group too.\r\n *\r\n * Bullets can have textures and even animations. You can control the speed at\r\n * which they are fired, the firing rate, the firing angle, and even set things\r\n * like gravity for them.\r\n *\r\n * A small example, using add.weapon, assumed to be running from within a\r\n * {@link Phaser.Scene#create} method:\r\n *\r\n * ```javascript\r\n * var weapon = this.add.weapon(10, 'bullet');\r\n * weapon.fireFrom.set(300, 300);\r\n * this.input.onDown.add(weapon.fire, this); // Update this\r\n * ```\r\n */\r\nclass WeaponPlugin extends Phaser.Plugins.ScenePlugin {\r\n  /**\r\n   * @param {Phaser.Scene} scene - A reference to the Phaser.Scene instance.\r\n   * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the\r\n   *  Phaser.Plugins.PluginManager instance.\r\n   */\r\n  constructor(scene, pluginManager) {\r\n    super(scene, pluginManager);\r\n\r\n    this.weapons = [];\r\n\r\n    // Register our new Game Object type\r\n    // pluginManager.registerGameObject('weapon', this.add);\r\n  }\r\n\r\n  add(bulletLimit, key, frame, group, weaponClass) {\r\n    if (!weaponClass) {\r\n      weaponClass = Weapon\r\n    }\r\n    const weapon = new weaponClass(this.scene, bulletLimit, key, frame, group);\r\n\r\n    this.weapons.push(weapon);\r\n\r\n    return weapon;\r\n  }\r\n\r\n  /**\r\n   * Called by the PluginManager when this plugin is started.\r\n   * If a plugin is stopped, and then started again, this will get called again.\r\n   * Typically called immediately after `BasePlugin.init`.\r\n   *\r\n   * @returns {void}\r\n   */\r\n  start() {\r\n    eventEmitter.on('postrender', this.postRender, this);\r\n  }\r\n\r\n  /**\r\n   * If this is a Scene Plugin (i.e. installed into a Scene) then this method is called when the Scene boots.\r\n   * By this point the plugin properties `scene` and `systems` will have already been set.\r\n   * In here you can listen for Scene events and set-up whatever you need for this plugin to run.\r\n   * @returns {void}\r\n   */\r\n  boot() {\r\n    const eventEmitter = this.systems.events;\r\n\r\n    //  Listening to the following events is entirely optional, although we would recommend cleanly shutting down and destroying at least.\r\n    //  If you don't need any of these events then remove the listeners and the relevant methods too.\r\n\r\n    eventEmitter.on('preupdate', this.preUpdate, this);\r\n    eventEmitter.on('update', this.update, this);\r\n    eventEmitter.on('postupdate', this.postUpdate, this);\r\n\r\n    eventEmitter.on('pause', this.pause, this);\r\n    eventEmitter.on('resume', this.resume, this);\r\n\r\n    eventEmitter.on('sleep', this.sleep, this);\r\n    eventEmitter.on('wake', this.wake, this);\r\n\r\n    eventEmitter.on('shutdown', this.shutdown, this);\r\n    eventEmitter.on('destroy', this.destroy, this);\r\n  }\r\n\r\n  //  Called every Scene step - phase 1\r\n  preUpdate(time, delta) {\r\n    // Empty\r\n  }\r\n\r\n  /**\r\n   * Internal update method, called by the PluginManager.\r\n   *\r\n   * @protected\r\n   * @param {number} time - Current game time\r\n   * @param {number} delta - Time since last call\r\n   * @returns {void}\r\n   */\r\n  update(time, delta) {\r\n    this.weapons.forEach(weapon => {\r\n      weapon.update();\r\n    });\r\n  }\r\n\r\n  //  Called every Scene step - phase 3\r\n  postUpdate(time, delta) {\r\n    // Empty\r\n  }\r\n\r\n  /**\r\n   * Internal update method, called by the PluginManager.\r\n   *\r\n   * @protected\r\n   * @returns {void}\r\n   */\r\n  postRender() {\r\n    this.weapons.forEach(weapon => {\r\n      weapon.postRender();\r\n    });\r\n  }\r\n\r\n  //  Called when a Scene is paused. A paused scene doesn't have its Step run, but still renders.\r\n  pause() {\r\n    // Empty\r\n  }\r\n\r\n  //  Called when a Scene is resumed from a paused state.\r\n  resume() {\r\n    // Empty\r\n  }\r\n\r\n  //  Called when a Scene is put to sleep. A sleeping scene doesn't update or render, but isn't destroyed or shutdown. preUpdate events still fire.\r\n  sleep() {\r\n    // Empty\r\n  }\r\n\r\n  //  Called when a Scene is woken from a sleeping state.\r\n  wake() {\r\n    // Empty\r\n  }\r\n\r\n  //  Called when a Scene shuts down, it may then come back again later (which will invoke the 'start' event) but should be considered dormant.\r\n  shutdown() {\r\n    // Empty\r\n  }\r\n\r\n  /**\r\n   * Destroys this Weapon.\r\n   * You must release everything in here, all references, all objects, free it all up.\r\n   * @returns {void}\r\n   */\r\n  destroy() {\r\n    this.pluginManager = null;\r\n    this.game = null;\r\n    this.scene = null;\r\n    this.systems = null;\r\n  }\r\n}\r\n\r\nWeaponPlugin.Weapon = Weapon;\r\nWeaponPlugin.Bullet = Bullet;\r\n\r\nWeaponPlugin.consts = consts\r\n\r\n//  Make sure you export the plugin for webpack to expose\r\n\r\nmodule.exports = WeaponPlugin;\r\n\n\n\n// WEBPACK FOOTER //\n// ./main.js","/**\r\n * @author       Patrick Sletvold\r\n * @author       jdotr <https://github.com/jdotrjs>\r\n * @author       Richard Davey\r\n * @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\r\n */\r\nconst Bullet = require('./Bullet');\r\nconst consts = require('./consts');\r\n\r\n/**\r\n * The Weapon provides the ability to easily create a bullet pool and manager.\r\n *\r\n * Weapons fire {@link Bullet} objects, which are essentially Sprites with a\r\n * few extra properties. The Bullets are enabled for Arcade Physics. They do\r\n * not currently work with P2 Physics.\r\n *\r\n * The Bullets are created inside of {@link #bullets weapon.bullets}, which is\r\n * a {@link Phaser.GameObjects.Group} instance. Anything you can usually do\r\n * with a Group, such as move it around the display list, iterate it, etc can\r\n * be done to the bullets Group too.\r\n *\r\n * Bullets can have textures and even animations. You can control the speed at\r\n * which they are fired, the firing rate, the firing angle, and even set things\r\n * like gravity for them.\r\n *\r\n * A small example, using add.weapon, assumed to be running from within a\r\n * {@link Phaser.Scene#create} method:\r\n *\r\n * ```javascript\r\n * var weapon = this.add.weapon(10, 'bullet');\r\n * weapon.fireFrom.set(300, 300);\r\n * this.input.onDown.add(weapon.fire, this); // Update this\r\n * ```\r\n */\r\nclass Weapon {\r\n  /**\r\n   * TODO: a builder style interface would be neat. Can be kicked way forward\r\n   * into polishing.\r\n   * @param {Phaser.Scene} scene - A reference to the Phaser.Scene instance.\r\n   * @param {number} bulletLimit - The number of bullets to create.\r\n   * @param {String} key - The texture key for the bullet.\r\n   * @param {String} frame - The frame name for the bullet.\r\n   * @param {Phaser.GameObjects.Group} group - A group to add the bullets to.\r\n   */\r\n  constructor(scene, bulletLimit, key, frame, group) {\r\n    this.scene = scene;\r\n\r\n    this.debugPhysics = null;\r\n\r\n    /**\r\n     * This is the Phaser.Group that contains all of the bullets managed by this plugin.\r\n     * @type {Phaser.GameObjects.Group}\r\n     */\r\n    this.bullets = null;\r\n\r\n    /**\r\n     * Should the bullet pool run out of bullets (i.e. they are all in flight) then this\r\n     * boolean controls if the Group will create a brand new bullet object or not.\r\n     * @type {boolean}\r\n     * @default\r\n     */\r\n    this.autoExpandBulletsGroup = false;\r\n\r\n    /**\r\n     * Will this weapon auto fire? If set to true then a new bullet will be fired\r\n     * based on the {@link #fireRate} value.\r\n     * @type {boolean}\r\n     * @default\r\n     */\r\n    this.autofire = false;\r\n\r\n    /**\r\n     * The total number of bullets this Weapon has fired so far.\r\n     * You can limit the number of shots allowed (via {@link #fireLimit}), and reset\r\n     * this total via {@link #resetShots}.\r\n     * @type {number}\r\n     * @default\r\n     */\r\n    this.shots = 0;\r\n\r\n    /**\r\n     * The maximum number of shots that this Weapon is allowed to fire before it stops.\r\n     * When the limit is his the {@link #onFireLimit} Signal is dispatched.\r\n     * You can reset the shot counter via {@link #resetShots}.\r\n     * @type {number}\r\n     * @default\r\n     */\r\n    this.fireLimit = 0;\r\n\r\n    /**\r\n     * The minimum interval between shots, in milliseconds.\r\n     * @type {number}\r\n     * @default\r\n     */\r\n    this.fireRate = 100;\r\n\r\n    /**\r\n     * This is a modifier that is added to the {@link #fireRate} each update to add variety\r\n     * to the firing rate of the Weapon. The value is given in milliseconds.\r\n     * If you've a `fireRate` of 200 and a `fireRateVariance` of 50 then the actual\r\n     * firing rate of the Weapon will be between 150 and 250.\r\n     * @type {number}\r\n     * @default\r\n     */\r\n    this.fireRateVariance = 0;\r\n\r\n    /**\r\n     * This is a Rectangle from within which the bullets are fired. By default it's a 1x1\r\n     * rectangle, the equivalent of a Point. But you can change the width and height, and if\r\n     * larger than 1x1 it'll pick a random point within the rectangle to launch the bullet from.\r\n     * @type {Phaser.Geom.Rectangle}\r\n     */\r\n    this.fireFrom = new Phaser.Geom.Rectangle(0, 0, 1, 1);\r\n\r\n    /**\r\n     * The angle at which the bullets are fired. This can be a const such as Phaser.ANGLE_UP\r\n     * or it can be any number from 0 to 360 inclusive, where 0 degrees is to the right.\r\n     * @type {integer}\r\n     * @default\r\n     */\r\n    this.fireAngle = consts.ANGLE_UP;\r\n\r\n    /**\r\n     * When a Bullet is fired it can optionally inherit the velocity of the `trackedSprite` if set.\r\n     * @type {boolean}\r\n     * @default\r\n     */\r\n    this.bulletInheritSpriteSpeed = false;\r\n\r\n    /**\r\n     * The string based name of the animation that the Bullet will be given on launch.\r\n     * This is set via {@link #addBulletAnimation}.\r\n     * @type {string}\r\n     * @default\r\n     */\r\n    this.bulletAnimation = '';\r\n\r\n    /**\r\n     * If you've added a set of frames via {@link #setBulletFrames} then you can optionally\r\n     * chose for each Bullet fired to pick a random frame from the set.\r\n     * @type {boolean}\r\n     * @default\r\n     */\r\n    this.bulletFrameRandom = false;\r\n\r\n    /**\r\n     * If you've added a set of frames via {@link #setBulletFrames} then you can optionally\r\n     * chose for each Bullet fired to use the next frame in the set. The frame index is then\r\n     * advanced one frame until it reaches the end of the set, then it starts from the start\r\n     * again. Cycling frames like this allows you to create varied bullet effects via\r\n     * sprite sheets.\r\n     * @type {boolean}\r\n     * @default\r\n     */\r\n    this.bulletFrameCycle = false;\r\n\r\n    /**\r\n     * Should the Bullets wrap around the world bounds? This automatically calls\r\n     * `World.wrap` on the Bullet each frame. See the docs for that method for details.\r\n     * @type {boolean}\r\n     * @default\r\n     */\r\n    this.bulletWorldWrap = false;\r\n\r\n    /**\r\n     * If `bulletWorldWrap` is true then you can provide an optional padding value with this\r\n     * property. It's added to the calculations determining when the Bullet should wrap around\r\n     * the world or not. The value is given in pixels.\r\n     * @type {integer}\r\n     * @default\r\n     */\r\n    this.bulletWorldWrapPadding = 0;\r\n\r\n    /**\r\n     * An optional angle offset applied to the Bullets when they are launched.\r\n     * This is useful if for example your bullet sprites have been drawn facing up, instead of\r\n     * to the right, and you want to fire them at an angle. In which case you can set the\r\n     * angle offset to be 90 and they'll be properly rotated when fired.\r\n     * @type {number}\r\n     * @default\r\n     */\r\n    this.bulletAngleOffset = 0;\r\n\r\n    /**\r\n     * This is a variance added to the angle of Bullets when they are fired.\r\n     * If you fire from an angle of 90 and have a `bulletAngleVariance` of 20 then the actual\r\n     * angle of the Bullets will be between 70 and 110 degrees. This is a quick way to add a\r\n     * great 'spread' effect to a Weapon.\r\n     * @type {number}\r\n     * @default\r\n     */\r\n    this.bulletAngleVariance = 0;\r\n\r\n    /**\r\n     * The initial velocity of fired bullets, in pixels per second.\r\n     * @type {number}\r\n     * @default\r\n     */\r\n    this.bulletSpeed = 200;\r\n\r\n    /**\r\n     * This is a variance added to the speed of Bullets when they are fired.\r\n     * If bullets have a {@link #bulletSpeed} value of 200, and a `bulletSpeedVariance` of 50\r\n     * then the actual speed of the Bullets will be between 150 and 250 pixels per second.\r\n     * @type {number}\r\n     * @default\r\n     */\r\n    this.bulletSpeedVariance = 0;\r\n\r\n    /**\r\n     * If you've set {@link #bulletKillType} to `consts.KILL_LIFESPAN` this controls the amount\r\n     * of lifespan the Bullets have set on launch. The value is given in milliseconds.\r\n     * When a Bullet hits its lifespan limit it will be automatically killed.\r\n     * @type {number}\r\n     * @default\r\n     */\r\n    this.bulletLifespan = 0;\r\n\r\n    /**\r\n     * If you've set {@link #bulletKillType} to `consts.KILL_DISTANCE` this controls the distance\r\n     * the Bullet can travel before it is automatically killed. The distance is given in pixels.\r\n     * @type {number}\r\n     * @default\r\n     */\r\n    this.bulletKillDistance = 0;\r\n\r\n    /**\r\n     * This is the amount of {@link Phaser.Physics.Arcade.Body#gravity} added to the Bullets physics body when fired.\r\n     * Gravity is expressed in pixels / second / second.\r\n     * @type {Phaser.Math.Vector2}\r\n     */\r\n    this.bulletGravity = new Phaser.Math.Vector2(0, 0);\r\n\r\n    /**\r\n     * Bullets can optionally adjust their rotation in-flight to match their velocity.\r\n     * This can create the effect of a bullet 'pointing' to the path it is following, for example\r\n     * an arrow being fired from a bow, and works especially well when added to {@link #bulletGravity}.\r\n     * @type {boolean}\r\n     * @default\r\n     */\r\n    this.bulletRotateToVelocity = false;\r\n\r\n    /**\r\n     * The Texture Key that the Bullets use when rendering.\r\n     * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\r\n     * @type {string}\r\n     * @default\r\n     */\r\n    this.bulletKey = key || '';\r\n\r\n    /**\r\n     * The Texture Frame that the Bullets use when rendering.\r\n     * Changing this has no effect on bullets in-flight, only on newly spawned bullets.\r\n     * @type {string|integer}\r\n     * @default\r\n     */\r\n    this.bulletFrame = frame || '';\r\n\r\n    /**\r\n     * Private var that holds the public `bulletClass` property.\r\n     * @type {function}\r\n     * @private\r\n     */\r\n    this._bulletClass = Bullet;\r\n\r\n    /**\r\n     * Private var that holds the public `bulletCollideWorldBounds` property.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this._bulletCollideWorldBounds = false;\r\n\r\n    /**\r\n     * Private var that holds the public `bulletKillType` property.\r\n     * @type {integer}\r\n     * @private\r\n     */\r\n    this._bulletKillType = consts.KILL_WORLD_BOUNDS;\r\n\r\n    /**\r\n     * Holds internal data about custom bullet body sizes.\r\n     *\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    this._data = {\r\n      customBody: false,\r\n      width: 0,\r\n      height: 0,\r\n      offsetX: 0,\r\n      offsetY: 0,\r\n    };\r\n\r\n    /**\r\n     * This Rectangle defines the bounds that are used when determining if a Bullet should be killed or not.\r\n     * It's used in combination with {@link #bulletKillType} when that is set to either `consts.KILL_WEAPON_BOUNDS`\r\n     * or `consts.KILL_STATIC_BOUNDS`. If you are not using either of these kill types then the bounds are ignored.\r\n     * If you are tracking a Sprite or Point then the bounds are centered on that object every frame.\r\n     *\r\n     * @type {Phaser.Geom.Rectangle}\r\n     */\r\n    this.bounds = new Phaser.Geom.Rectangle();\r\n\r\n    /**\r\n     * The Rectangle used to calculate the bullet bounds from.\r\n     *\r\n     * @type {Phaser.Geom.Rectangle}\r\n     * @private\r\n     */\r\n    this.bulletBounds = this.scene.physics.world.bounds;\r\n\r\n    /**\r\n     * This array stores the frames added via @link #setBulletFrames.\r\n     *\r\n     * @type {Array}\r\n     * @protected\r\n     */\r\n    this.bulletFrames = [];\r\n\r\n    /**\r\n     * The index of the frame within {@link #bulletFrames} that is currently being used.\r\n     * This value is only used if {@link #bulletFrameCycle} is set to `true`.\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.bulletFrameIndex = 0;\r\n\r\n    /**\r\n     * An internal object that stores the animation data added via {@link #addBulletAnimation}.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    this.anims = {};\r\n\r\n    /**\r\n     * The Sprite currently being tracked by the Weapon, if any.\r\n     * This is set via the {@link #trackSprite} method.\r\n     *\r\n     * @type {Phaser.GameObjects.Sprite|Object}\r\n     */\r\n    this.trackedSprite = null;\r\n\r\n    /**\r\n     * The Pointer currently being tracked by the Weapon, if any.\r\n     * This is set via the {@link #trackPointer} method.\r\n     *\r\n     * @type {Phaser.Input.Pointer}\r\n     */\r\n    this.trackedPointer = null;\r\n\r\n    /**\r\n     * If you want this Weapon to be able to fire more than 1 bullet in a single\r\n     * update, then set this property to `true`. When `true` the Weapon plugin won't\r\n     * set the shot / firing timers until the `postRender` phase of the game loop.\r\n     * This means you can call `fire` (and similar methods) as often as you like in one\r\n     * single game update.\r\n     *\r\n     * @type {boolean}\r\n     * @default\r\n     */\r\n    this.multiFire = false;\r\n\r\n    /**\r\n     * Internal multiFire test flag.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    this._hasFired = false;\r\n\r\n    /**\r\n     * If the Weapon is tracking a Sprite, should it also track the Sprites rotation?\r\n     * This is useful for a game such as Asteroids, where you want the weapon to fire based\r\n     * on the sprites rotation.\r\n     *\r\n     * @type {boolean}\r\n     * @default\r\n     */\r\n    this.trackRotation = false;\r\n\r\n    /**\r\n     * The Track Offset is a Vector2 object that allows you to specify a pixel offset that bullets use\r\n     * when launching from a tracked Sprite or Pointer. For example if you've got a bullet that is 2x2 pixels\r\n     * in size, but you're tracking a Sprite that is 32x32, then you can set `trackOffset.x = 16` to have\r\n     * the bullet launched from the center of the Sprite.\r\n     *\r\n     * @type {Phaser.Math.Vector2}\r\n     */\r\n    this.trackOffset = new Phaser.Math.Vector2();\r\n\r\n    /**\r\n     * Internal firing rate time tracking variable.\r\n     *\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this._nextFire = 0;\r\n\r\n    /**\r\n     * Internal firing rate time tracking variable used by multiFire.\r\n     *\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this._tempNextFire = 0;\r\n\r\n    /**\r\n     * Internal firing rotation tracking point.\r\n     *\r\n     * @type {Phaser.Math.Vector2}\r\n     * @private\r\n     */\r\n    this._rotatedPoint = new Phaser.Math.Vector2();\r\n\r\n    this.eventEmitter = new Phaser.Events.EventEmitter();\r\n\r\n    this.createBullets(bulletLimit, key, frame, group);\r\n  }\r\n\r\n  /**\r\n   * This method performs two actions: First it will check to see if the\r\n   * {@link #bullets} Group exists or not, and if not it creates it, adding its\r\n   * children to the `group` given as the 4th argument.\r\n   *\r\n   * Then it will seed the bullet pool with the `quantity` number of Bullets,\r\n   * using the texture key and frame provided (if any).\r\n   *\r\n   * If for example you set the quantity to be 10, then this Weapon will only\r\n   * ever be able to have 10 bullets in-flight simultaneously. If you try to\r\n   * fire an 11th bullet then nothing will happen until one, or more, of the\r\n   * in-flight bullets have been killed, freeing them up for use by the Weapon\r\n   * again.\r\n   *\r\n   * If you do not wish to have a limit set, then pass in -1 as the quantity.\r\n   * In this instance the Weapon will keep increasing the size of the bullet\r\n   * pool as needed. It will never reduce the size of the pool however, so be\r\n   * careful it doesn't grow too large.\r\n   *\r\n   * You can either set the texture key and frame here, or via the\r\n   * {@link #bulletKey} and {@link #bulletFrame} properties. You can also\r\n   * animate bullets, or set them to use random frames. All Bullets belonging\r\n   * to a single Weapon instance must share the same texture key however.\r\n   *\r\n   * @param {integer} [quantity=1] - The quantity of bullets to seed the Weapon\r\n   *  with. If -1 it will set the pool to automatically expand.\r\n   * @param {string} [key] - The Game.cache key of the image that this Sprite\r\n   *  will use.\r\n   * @param {integer|string} [frame] - If the Sprite image contains multiple\r\n   *  frames you can specify which one to use here.\r\n   * @param {Phaser.GameObjects.Group} [group] - Optional Group to add the\r\n   *  object to. If not specified it will be added to the World group.\r\n   * @return {Weapon} This Weapon instance.\r\n   */\r\n  createBullets(quantity, key, frame, group, bulletClass) {\r\n    if (quantity === undefined) {\r\n      quantity = 1;\r\n    }\r\n    if (bulletClass) {\r\n      this._bulletClass = bulletClass\r\n    }\r\n    /*if (group === undefined) {\r\n      group = this.game.world;\r\n    }*/\r\n\r\n    if (this.bullets && !this.bullets.scene) {\r\n      this.bullets = null;\r\n    }\r\n\r\n    if (!this.bullets) {\r\n      this.bullets = this.scene.add.group({\r\n        classType: this._bulletClass,\r\n        maxSize: quantity,\r\n        runChildUpdate: true\r\n      });\r\n    }\r\n\r\n    if (quantity !== 0) {\r\n      if (quantity === -1) {\r\n        this.autoExpandBulletsGroup = true;\r\n        quantity = 1;\r\n      }\r\n\r\n      this.bullets.createMultiple({\r\n        key,\r\n        frame,\r\n        repeat: quantity,\r\n        active: false,\r\n        visible: false\r\n      });\r\n\r\n      this.bullets.children.each(function (child) {\r\n        child.data.bulletManager = this\r\n      }, this);\r\n\r\n      this.bulletKey = key;\r\n      this.bulletFrame = frame;\r\n\r\n      if (group) {\r\n        group.addMultiple(this.bullets.children.entries)\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Call a function on each in-flight bullet in this Weapon.\r\n   *\r\n   * See {@link Phaser.GameObjects.Group#forEachExists forEachExists} for more details.\r\n   *\r\n   * @param {function} callback - The function that will be called for each applicable child. The child will be passed as the first argument.\r\n   * @param {object} callbackContext - The context in which the function should be called (usually 'this').\r\n   * @param {...any} [args=(none)] - Additional arguments to pass to the callback function, after the child item.\r\n   * @return {Weapon} This Weapon instance.\r\n   */\r\n  forEach(callback, callbackContext) {\r\n    const extraArgs = arguments;\r\n\r\n    this.bullets.children.each(child => {\r\n      if (child.active) {\r\n        callback.call(callbackContext, child, extraArgs);\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets {@link Phaser.Physics.Arcade.Body#enable} to `false` on each bullet in this Weapon.\r\n   * This has the effect of stopping them in-flight should they be moving.\r\n   * It also stops them being able to be checked for collision.\r\n   *\r\n   * @return {Weapon} This Weapon instance.\r\n   */\r\n  pauseAll() {\r\n    this.bullets.children.each(child => {\r\n      child.body.enable = false;\r\n      if (child.data.timeEvent !== null) {\r\n        child.data.timeEvent.paused = true;\r\n      }\r\n    }, this);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets {@link Phaser.Physics.Arcade.Body#enable} to `true` on each bullet in this Weapon.\r\n   * This has the effect of resuming their motion should they be in-flight.\r\n   * It also enables them for collision checks again.\r\n   *\r\n   * @return {Weapon} This Weapon instance.\r\n   */\r\n  resumeAll() {\r\n    this.bullets.children.each(child => {\r\n      child.body.enable = true;\r\n      if (child.data.timeEvent !== null) {\r\n        child.data.timeEvent.paused = false;\r\n      }\r\n    }, this);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Calls {@link Phaser.Bullet#kill} on every in-flight bullet in this Weapon.\r\n   * Also re-enables their physics bodies, should they have been disabled via {@link #pauseAll}.\r\n   *\r\n   * @return {Weapon} This Weapon instance.\r\n   */\r\n  killAll() {\r\n    this.bullets.children.each(child => {\r\n      if (child.active) {\r\n        child.kill();\r\n      }\r\n      child.body.enable = true;\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Resets the {@link #shots} counter back to zero. This is used when you've set\r\n   * {@link #fireLimit} and have hit (or just wish to reset) your limit.\r\n   *\r\n   * @param {integer} [newLimit] - Optionally set a new {@link #fireLimit}.\r\n   * @return {Weapon} This Weapon instance.\r\n   */\r\n  resetShots(newLimit) {\r\n    this.shots = 0;\r\n\r\n    if (newLimit !== undefined) {\r\n      this.fireLimit = newLimit;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets this Weapon to track the given Sprite, or any Object with a public {@link Phaser.Component.Core#world world} Point object.\r\n   * When a Weapon tracks a Sprite it will automatically update its {@link #fireFrom} value to match the Sprite's\r\n   * position within the Game World, adjusting the coordinates based on the offset arguments.\r\n   *\r\n   * This allows you to lock a Weapon to a Sprite, so that bullets are always launched from its location.\r\n   *\r\n   * Calling `trackSprite` will reset {@link #trackedPointer} to null, should it have been set, as you can\r\n   * only track _either_ a Sprite, or a Pointer, at once, but not both.\r\n   *\r\n   * @param {Phaser.GameObjects.Sprite|Object} sprite - The Sprite to track the position of.\r\n   * @param {integer} [offsetX=0] - The horizontal offset from the Sprites position to be applied to the Weapon.\r\n   * @param {integer} [offsetY=0] - The vertical offset from the Sprites position to be applied to the Weapon.\r\n   * @param {boolean} [trackRotation=false] - Should the Weapon also track the Sprites rotation?\r\n   * @return {Weapon} This Weapon instance.\r\n   */\r\n  trackSprite(sprite, offsetX, offsetY, trackRotation) {\r\n    if (offsetX === undefined) {\r\n      offsetX = 0;\r\n    }\r\n    if (offsetY === undefined) {\r\n      offsetY = 0;\r\n    }\r\n    if (trackRotation === undefined) {\r\n      trackRotation = false;\r\n    }\r\n\r\n    this.trackedPointer = null;\r\n    this.trackedSprite = sprite;\r\n    this.trackRotation = trackRotation;\r\n\r\n    this.trackOffset.set(offsetX, offsetY);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets this Weapon to track the given Pointer.\r\n   * When a Weapon tracks a Pointer it will automatically update its {@link #fireFrom} value to match the Pointer's\r\n   * position within the Game World, adjusting the coordinates based on the offset arguments.\r\n   *\r\n   * This allows you to lock a Weapon to a Pointer, so that bullets are always launched from its location.\r\n   *\r\n   * Calling `trackPointer` will reset {@link #trackedSprite} to null, should it have been set, as you can\r\n   * only track _either_ a Pointer, or a Sprite, at once, but not both.\r\n   *\r\n   * @param {Phaser.Input.Pointer} [pointer] - The Pointer to track the position of. Defaults to `Input.activePointer` if not specified.\r\n   * @param {integer} [offsetX=0] - The horizontal offset from the Pointers position to be applied to the Weapon.\r\n   * @param {integer} [offsetY=0] - The vertical offset from the Pointers position to be applied to the Weapon.\r\n   * @return {Weapon} This Weapon instance.\r\n   */\r\n  trackPointer(pointer, offsetX, offsetY) {\r\n    if (pointer === undefined && this.scene.input) {\r\n      pointer = this.scene.input.activePointer;\r\n    }\r\n    if (offsetX === undefined) {\r\n      offsetX = 0;\r\n    }\r\n    if (offsetY === undefined) {\r\n      offsetY = 0;\r\n    }\r\n\r\n    this.trackedPointer = pointer;\r\n    this.trackedSprite = null;\r\n    this.trackRotation = false;\r\n\r\n    this.trackOffset.set(offsetX, offsetY);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Attempts to fire multiple bullets from the positions defined in the given array.\r\n   *\r\n   * If you provide a `from` argument, or if there is a tracked Sprite or Pointer, then\r\n   * the positions are treated as __offsets__ from the given objects position.\r\n   *\r\n   * If `from` is undefined, and there is no tracked object, then the bullets are fired\r\n   * from the given positions, as they exist in the world.\r\n   *\r\n   * Calling this method sets {@link #multiFire} to `true`.\r\n   *\r\n   * If there are not enough bullets available in the pool, and the pool cannot be extended,\r\n   * then this method may not fire from all of the given positions.\r\n   *\r\n   * When the bullets are launched they have their texture and frame updated, as required.\r\n   * The velocity of the bullets are calculated based on Weapon properties like {@link #bulletSpeed}.\r\n   *\r\n   * @param {array} positions - An array of positions. Each position can be any Object, as long as it has public `x` and `y` properties, such as Phaser.Point, { x: 0, y: 0 }, Phaser.Sprite, etc.\r\n   * @param {Phaser.GameObject.Sprite|Phaser.Math.Vector2|Object|string} [from] - Optionally fires the bullets **from** the `x` and `y` properties of this object, _instead_ of any {@link #trackedSprite} or `trackedPointer` that is set.\r\n   * @return {array} An array containing all of the fired Phaser.Bullet objects, if a launch was successful, otherwise an empty array.\r\n   */\r\n  fireMany(positions, from) {\r\n    this.multiFire = true;\r\n\r\n    const bullets = [];\r\n\r\n    if (from || this.trackedSprite || this.trackedPointer) {\r\n      positions.forEach(offset => {\r\n        bullets.push(this.fire(from, null, null, offset.x, offset.y));\r\n      });\r\n    } else {\r\n      positions.forEach(position => {\r\n        bullets.push(this.fire(position));\r\n      });\r\n    }\r\n\r\n    return bullets;\r\n  }\r\n\r\n  /**\r\n   * Attempts to fire a single Bullet from a tracked Sprite or Pointer, but applies an offset\r\n   * to the position first. This is the same as calling {@link #fire} and passing in the offset arguments.\r\n   *\r\n   * If there are no more bullets available in the pool, and the pool cannot be extended,\r\n   * then this method returns `null`. It will also return `null` if not enough time has expired since the last time\r\n   * the Weapon was fired, as defined in the {@link #fireRate} property.\r\n   *\r\n   * Otherwise the first available bullet is selected, launched, and returned.\r\n   *\r\n   * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\r\n   * calculated based on Weapon properties like {@link #bulletSpeed}.\r\n   *\r\n   * If you wish to fire multiple bullets in a single game update, then set {@link #multiFire} to `true`\r\n   * and you can call this method as many times as you like, per loop. See also {@link #fireMany}.\r\n   *\r\n   * @param {number} [offsetX=0] - The horizontal offset from the position of the tracked Sprite or Pointer, as set with {@link #trackSprite}.\r\n   * @param {number} [offsetY=0] - The vertical offset from the position of the tracked Sprite or Pointer, as set with {@link #trackSprite}.\r\n   * @return {Bullet} The fired bullet, if a launch was successful, otherwise `null`.\r\n   */\r\n  fireOffset(offsetX, offsetY) {\r\n    if (offsetX === undefined) {\r\n      offsetX = 0;\r\n    }\r\n    if (offsetY === undefined) {\r\n      offsetY = 0;\r\n    }\r\n\r\n    return this.fire(null, null, null, offsetX, offsetY);\r\n  }\r\n\r\n  /**\r\n   * Fires a bullet **at** the given Pointer. The bullet will be launched from the {@link #fireFrom} position,\r\n   * or from a Tracked Sprite or Pointer, if you have one set.\r\n   *\r\n   * @param {Phaser.Input.Pointer} [pointer] - The Pointer to fire the bullet towards.\r\n   * @return {Bullet} The fired bullet if successful, null otherwise.\r\n   */\r\n  fireAtPointer(pointer) {\r\n    if (pointer === undefined && this.scene.input) {\r\n      pointer = this.scene.input.activePointer;\r\n    }\r\n\r\n    return this.fire(null, pointer.x, pointer.y);\r\n  }\r\n\r\n  /**\r\n   * Fires a bullet **at** the given Sprite. The bullet will be launched from the {@link #fireFrom} position,\r\n   * or from a Tracked Sprite or Pointer, if you have one set.\r\n   *\r\n   * @param {Phaser.GameObjects.Sprite} [sprite] - The Sprite to fire the bullet towards.\r\n   * @return {Bullet} The fired bullet if successful, null otherwise.\r\n   */\r\n  fireAtSprite(sprite) {\r\n    return this.fire(null, sprite.x, sprite.y);\r\n  }\r\n\r\n  /**\r\n   * Fires a bullet **at** the given coordinates. The bullet will be launched from the {@link #fireFrom} position,\r\n   * or from a Tracked Sprite or Pointer, if you have one set.\r\n   *\r\n   * @param {number} [x] - The x coordinate, in world space, to fire the bullet towards.\r\n   * @param {number} [y] - The y coordinate, in world space, to fire the bullet towards.\r\n   * @return {Bullet} The fired bullet if successful, null otherwise.\r\n   */\r\n  fireAtXY(x, y) {\r\n    return this.fire(null, x, y);\r\n  }\r\n\r\n  /**\r\n   * Attempts to fire a single Bullet. If there are no more bullets available in the pool, and the pool cannot be extended,\r\n   * then this method returns `null`. It will also return `null` if not enough time has expired since the last time\r\n   * the Weapon was fired, as defined in the {@link #fireRate} property.\r\n   *\r\n   * Otherwise the first available bullet is selected, launched, and returned.\r\n   *\r\n   * The arguments are all optional, but allow you to control both where the bullet is launched from, and aimed at.\r\n   *\r\n   * If you don't provide any of the arguments then it uses those set via properties such as {@link #trackedSprite},\r\n   * {@link #bulletAngle} and so on.\r\n   *\r\n   * When the bullet is launched it has its texture and frame updated, as required. The velocity of the bullet is\r\n   * calculated based on Weapon properties like `bulletSpeed`.\r\n   *\r\n   * If you wish to fire multiple bullets in a single game update, then set `Weapon.multiFire = true`\r\n   * and you can call `fire` as many times as you like, per loop. Multiple fires in a single update\r\n   * only counts once towards the `shots` total, but you will still receive a Signal for each bullet.\r\n   *\r\n   * @param {Phaser.GameObjects.Sprite|Phaser.Math.Vector2|Object|string} [from] - Optionally fires the bullet **from** the `x` and `y` properties of this object. If set this overrides {@link #trackedSprite} or `trackedPointer`. Pass `null` to ignore it.\r\n   * @param {number} [x] - The x coordinate, in world space, to fire the bullet **towards**. If left as `undefined`, or `null`, the bullet direction is based on its angle.\r\n   * @param {number} [y] - The y coordinate, in world space, to fire the bullet **towards**. If left as `undefined`, or `null`, the bullet direction is based on its angle.\r\n   * @param {number} [offsetX=0] - If the bullet is fired from a tracked Sprite or Pointer, or the `from` argument is set, this applies a horizontal offset from the launch position.\r\n   * @param {number} [offsetY=0] - If the bullet is fired from a tracked Sprite or Pointer, or the `from` argument is set, this applies a vertical offset from the launch position.\r\n   * @return {Bullet} The fired bullet, if a launch was successful, otherwise `null`.\r\n   */\r\n  fire(from, x, y, offsetX, offsetY) {\r\n    if (x === undefined) {\r\n      x = null;\r\n    }\r\n    if (y === undefined) {\r\n      y = null;\r\n    }\r\n\r\n    if (\r\n      this.scene.time.now < this._nextFire ||\r\n      (this.fireLimit > 0 && this.shots === this.fireLimit)\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    let speed = this.bulletSpeed;\r\n\r\n    //  Apply +- speed variance\r\n    if (this.bulletSpeedVariance !== 0) {\r\n      speed += Phaser.Math.Between(-this.bulletSpeedVariance, this.bulletSpeedVariance);\r\n    }\r\n\r\n    if (from) {\r\n      if (this.fireFrom.width > 1) {\r\n        this.fireFrom.CenterOn(from.x, from.y);\r\n      } else {\r\n        this.fireFrom.x = from.x;\r\n        this.fireFrom.y = from.y;\r\n      }\r\n    } else if (this.trackedSprite) {\r\n      if (this.trackRotation) {\r\n        this._rotatedPoint.set(\r\n          this.trackedSprite.x + this.trackOffset.x,\r\n          this.trackedSprite.y + this.trackOffset.y\r\n        );\r\n        Phaser.Math.RotateAround(this._rotatedPoint,\r\n          this.trackedSprite.x,\r\n          this.trackedSprite.y,\r\n          this.trackedSprite.rotation\r\n        );\r\n\r\n        if (this.fireFrom.width > 1) {\r\n          this.fireFrom.CenterOn(this._rotatedPoint.x, this._rotatedPoint.y);\r\n        } else {\r\n          this.fireFrom.x = this._rotatedPoint.x;\r\n          this.fireFrom.y = this._rotatedPoint.y;\r\n        }\r\n      } else if (this.fireFrom.width > 1) {\r\n        this.fireFrom.CenterOn(\r\n          this.trackedSprite.x + this.trackOffset.x,\r\n          this.trackedSprite.y + this.trackOffset.y\r\n        );\r\n      } else {\r\n        this.fireFrom.x = this.trackedSprite.x + this.trackOffset.x;\r\n        this.fireFrom.y = this.trackedSprite.y + this.trackOffset.y;\r\n      }\r\n\r\n      if (this.bulletInheritSpriteSpeed) {\r\n        speed += this.trackedSprite.body.speed;\r\n      }\r\n    } else if (this.trackedPointer) {\r\n      if (this.fireFrom.width > 1) {\r\n        this.fireFrom.CenterOn(\r\n          this.trackedPointer.x + this.trackOffset.x,\r\n          this.trackedPointer.y + this.trackOffset.y\r\n        );\r\n      } else {\r\n        this.fireFrom.x = this.trackedPointer.x + this.trackOffset.x;\r\n        this.fireFrom.y = this.trackedPointer.y + this.trackOffset.y;\r\n      }\r\n    }\r\n\r\n    if (offsetX !== undefined) {\r\n      this.fireFrom.x += offsetX;\r\n    }\r\n\r\n    if (offsetY !== undefined) {\r\n      this.fireFrom.y += offsetY;\r\n    }\r\n\r\n    const randomX = this.fireFrom.x + Math.random() * this.fireFrom.width;\r\n    const randomY = this.fireFrom.y + Math.random() * this.fireFrom.height;\r\n\r\n    const fromX = this.fireFrom.width > 1 ? randomX : this.fireFrom.x;\r\n    const fromY = this.fireFrom.height > 1 ? randomY : this.fireFrom.y;\r\n\r\n    let angle = this.trackRotation ? this.trackedSprite.angle : this.fireAngle;\r\n\r\n    //  The position (in world space) to fire the bullet towards, if set\r\n    if (x !== null && y !== null) {\r\n      angle = Phaser.Math.RadToDeg(Math.atan2(y - fromY, x - fromX));\r\n    }\r\n\r\n    //  Apply +- angle variance\r\n    if (this.bulletAngleVariance !== 0) {\r\n      angle += Phaser.Math.Between(-this.bulletAngleVariance, this.bulletAngleVariance);\r\n    }\r\n\r\n    let moveX = 0;\r\n    let moveY = 0;\r\n\r\n    //  Avoid sin/cos for right-angled shots\r\n    if (angle === 0 || angle === 180) {\r\n      moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\r\n    } else if (angle === 90 || angle === 270) {\r\n      moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\r\n    } else {\r\n      moveX = Math.cos(Phaser.Math.DegToRad(angle)) * speed;\r\n      moveY = Math.sin(Phaser.Math.DegToRad(angle)) * speed;\r\n    }\r\n\r\n    let bullet = null;\r\n\r\n    if (this.autoExpandBulletsGroup) {\r\n      bullet = this.bullets.getFirstDead(true, fromX, fromY, this.bulletKey, this.bulletFrame);\r\n      bullet.data.bulletManager = this;\r\n    } else {\r\n      bullet = this.bullets.getFirstDead(false);\r\n    }\r\n\r\n    if (bullet) {\r\n      bullet.prepare(fromX, fromY);\r\n      bullet.data.fromX = fromX;\r\n      bullet.data.fromY = fromY;\r\n      bullet.data.killType = this.bulletKillType;\r\n      bullet.data.killDistance = this.bulletKillDistance;\r\n      bullet.data.rotateToVelocity = this.bulletRotateToVelocity;\r\n\r\n      if (this.bulletKillType === consts.KILL_LIFESPAN) {\r\n        if (this.bulletLifespan <= 0) {\r\n          throw new Error('Invalid bulletLifespan; must be > 0')\r\n        }\r\n        bullet.data.timeEvent = this.scene.time.addEvent({\r\n          delay: this.bulletLifespan,\r\n          // TODO: test to see if we can just pass callbackContext: bullet and\r\n          // have it work. no need to re-bind every time we fire a bullet\r\n          callback: bullet.kill.bind(bullet),\r\n        })\r\n        bullet.lifespan = this.bulletLifespan;\r\n      }\r\n\r\n      bullet.angle = angle + this.bulletAngleOffset;\r\n\r\n      //  Frames and Animations\r\n      if (this.bulletAnimation) {\r\n        bullet.anims.play(this.bulletAnimation);\r\n      } else if (this.bulletFrameCycle) {\r\n        if (this.bulletFrameIndex >= this.bulletFrames.length) {\r\n          this.bulletFrameIndex = 0;\r\n        }\r\n        bullet.setTexture(this.bulletKey, this.bulletFrameIndex);\r\n        this.bulletFrameIndex++;\r\n      } else if (this.bulletFrameRandom) {\r\n        const nextFrame = Math.floor(Math.random() * this.bulletFrames.length);\r\n        bullet.setTexture(this.bulletKey, nextFrame)\r\n      }\r\n\r\n      if (bullet.data.bodyDirty) {\r\n        if (this._data.customBody) {\r\n          bullet.body.setSize(this._data.width, this._data.height);\r\n          bullet.body.setOffset(this._data.offsetX, this._data.offsetY);\r\n        }\r\n\r\n        bullet.body.collideWorldBounds = this.bulletCollideWorldBounds;\r\n\r\n        bullet.data.bodyDirty = false;\r\n      }\r\n\r\n      bullet.body.setVelocity(moveX, moveY);\r\n      bullet.body.setGravity(this.bulletGravity.x, this.bulletGravity.y);\r\n\r\n      let next = 0;\r\n\r\n      if (this.bulletSpeedVariance !== 0) {\r\n        let rate = this.fireRate;\r\n\r\n        rate += Phaser.Math.Between(-this.fireRateVariance, this.fireRateVariance);\r\n\r\n        if (rate < 0) {\r\n          rate = 0;\r\n        }\r\n\r\n        next = this.scene.time.now + rate;\r\n      } else {\r\n        next = this.scene.time.now + this.fireRate;\r\n      }\r\n\r\n      if (this.multiFire) {\r\n        if (!this._hasFired) {\r\n          //  We only add 1 to the 'shots' count for multiFire shots\r\n          this._hasFired = true;\r\n          this._tempNextFire = next;\r\n          this.shots++;\r\n        }\r\n      } else {\r\n        this._nextFire = next;\r\n\r\n        this.shots++;\r\n      }\r\n\r\n      this.eventEmitter.emit('fire', bullet, this, speed);\r\n\r\n      if (this.fireLimit > 0 && this.shots === this.fireLimit) {\r\n        this.eventEmitter('firelimit', this, this.fireLimit);\r\n      }\r\n    }\r\n\r\n    return bullet;\r\n  }\r\n\r\n  /**\r\n   * You can modify the size of the physics Body the Bullets use to be any dimension you need.\r\n   * This allows you to make it smaller, or larger, than the parent Sprite.\r\n   * You can also control the x and y offset of the Body. This is the position of the\r\n   * Body relative to the top-left of the Sprite _texture_.\r\n   *\r\n   * For example: If you have a Sprite with a texture that is 80x100 in size,\r\n   * and you want the physics body to be 32x32 pixels in the middle of the texture, you would do:\r\n   *\r\n   * `setSize(32 / Math.abs(this.scale.x), 32 / Math.abs(this.scale.y), 24, 34)`\r\n   *\r\n   * Where the first two parameters are the new Body size (32x32 pixels) relative to the Sprite's scale.\r\n   * 24 is the horizontal offset of the Body from the top-left of the Sprites texture, and 34\r\n   * is the vertical offset.\r\n   *\r\n   * @param {number} width - The width of the Body.\r\n   * @param {number} height - The height of the Body.\r\n   * @param {number} [offsetX] - The X offset of the Body from the top-left of the Sprites texture.\r\n   * @param {number} [offsetY] - The Y offset of the Body from the top-left of the Sprites texture.\r\n   * @return {Weapon} The Weapon Plugin.\r\n   */\r\n  setBulletBodyOffset(width, height, offsetX, offsetY) {\r\n    if (offsetX === undefined) {\r\n      offsetX = 0;\r\n    }\r\n    if (offsetY === undefined) {\r\n      offsetY = 0;\r\n    }\r\n\r\n    this._data.customBody = true;\r\n    this._data.width = width;\r\n    this._data.height = height;\r\n    this._data.offsetX = offsetX;\r\n    this._data.offsetY = offsetY;\r\n\r\n    //  Update all bullets in the pool\r\n    this.bullets.children.each(child => {\r\n      child.body.setSize(width, height);\r\n      child.body.setOffset(offsetX, offsetY);\r\n    });\r\n    //this.bullets.setAll('data.bodyDirty', false);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the texture frames that the bullets can use when being launched.\r\n   *\r\n   * This is intended for use when you've got numeric based frames, such as\r\n   * those loaded via a Sprite Sheet.\r\n   *\r\n   * It works by calling `Phaser.Utils.Array.NumberArray` internally, using\r\n   * the min and max values provided. Then it sets the frame index to be zero.\r\n   *\r\n   * You can optionally set the cycle and random booleans, to allow bullets to\r\n   * cycle through the frames when they're fired, or pick one at random.\r\n   *\r\n   * @param {integer} min - The minimum value the frame can be. Usually zero.\r\n   * @param {integer} max - The maximum value the frame can be.\r\n   * @param {integer} [selcetionMethod=BULLET_FRAME_STABLE] - Specifies how the\r\n   *  frame for the fired bullet will be selected. See consts.BULLET_FRAME_XYZ\r\n   *  for options.\r\n   * @return {Weapon} The Weapon Plugin.\r\n   */\r\n  setBulletFrames(min, max, selectionMethod) {\r\n    if (selectionMethod === undefined) {\r\n      selectionMethod = consts.BULLET_FRAME_STABLE;\r\n    }\r\n    if (\r\n      typeof selectionMethod !== 'number' ||\r\n      selectionMethod < consts.BULLET_FRAME_STABLE ||\r\n      selectionMethod > consts.BULLET_FRAME_RANDOM\r\n    ) {\r\n      throw new Error(`Invalid bullet frame selection method specified: ${selectionMethod}`)\r\n    }\r\n\r\n    if (min > max) {\r\n      throw new Error(`min frame (${min}) must be <= max frame ${max}`)\r\n    }\r\n\r\n    this.bulletFrames = Phaser.Utils.Array.NumberArray(min, max);\r\n    this.bulletFrameIndex = 0;\r\n    this.bulletFrameCycle = selectionMethod === consts.BULLET_FRAME_CYCLE;\r\n    this.bulletFrameRandom = selectionMethod === consts.BULLET_FRAME_RANDOM;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Adds a new animation under the given key. Optionally set the frames, frame rate and loop.\r\n   * The arguments are all the same as for `Animation.add`, and work in the same way.\r\n   *\r\n   * {@link #bulletAnimation} will be set to this animation after it's created. From that point on, all\r\n   * bullets fired will play using this animation. You can swap between animations by calling this method\r\n   * several times, and then just changing the {@link #bulletAnimation} property to the name of the animation\r\n   * you wish to play for the next launched bullet.\r\n   *\r\n   * If you wish to stop using animations at all, set {@link #bulletAnimation} to '' (an empty string).\r\n   *\r\n   * @param {string} name - The unique (within the Weapon instance) name for the animation, i.e. \"fire\", \"blast\".\r\n   * @param {Array} [frames=null] - An array of numbers/strings that correspond to the frames to add to this animation and in which order. e.g. [1, 2, 3] or ['run0', 'run1', run2]). If null then all frames will be used.\r\n   * @param {number} [frameRate=60] - The speed at which the animation should play. The speed is given in frames per second.\r\n   * @param {number} [loop=1] - Number of times to repeat the animation. Set to -1 to repeat forever.\r\n   * @return {Weapon} The Weapon Plugin.\r\n   */\r\n  addBulletAnimation(name, frames, frameRate, loop) {\r\n    if (!this.scene.sys.anims.anims.contains(name)) {\r\n      this.scene.sys.anims.create({\r\n        key: name,\r\n        frames,\r\n        frameRate,\r\n        loop,\r\n      });\r\n\r\n      this.anims[name] = this.scene.sys.anims.anims.entries[name];\r\n    }\r\n\r\n    this.bulletAnimation = name;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Uses `Game.Debug` to draw some useful information about this Weapon, including the number of bullets\r\n   * both in-flight, and available. And optionally the physics debug bodies of the bullets.\r\n   *\r\n   * @param {integer} [x=16] - The coordinate, in screen space, at which to draw the Weapon debug data.\r\n   * @param {integer} [y=32] - The coordinate, in screen space, at which to draw the Weapon debug data.\r\n   * @param {boolean} [debugBodies=false] - Optionally draw the physics body of every bullet in-flight.\r\n   */\r\n  debug(x, y, debugBodies) {\r\n    /*if (x === undefined) {\r\n      x = 16;\r\n    }\r\n    if (y === undefined) {\r\n      y = 32;\r\n    }\r\n    if (debugBodies === undefined) {\r\n      debugBodies = false;\r\n    }\r\n\r\n    this.game.debug.text('Weapon Plugin', x, y);\r\n    this.game.debug.text(\r\n      'Bullets Alive: ' + this.bullets.total + ' - Total: ' + this.bullets.length,\r\n      x,\r\n      y + 24\r\n    );\r\n\r\n    if (debugBodies) {\r\n      this.bullets.forEachExists(this.game.debug.body, this.game.debug, 'rgba(255, 0, 255, 0.8)');\r\n    }*/\r\n  }\r\n\r\n  /**\r\n   * Internal update method, called by the Weapon Plugin.\r\n   * @returns {void}\r\n   */\r\n  update() {\r\n    if (this._bulletKillType === consts.KILL_WEAPON_BOUNDS) {\r\n      if (this.trackedSprite) {\r\n        this.trackedSprite.updateTransform();\r\n        this.bounds.centerOn(this.trackedSprite.x, this.trackedSprite.y);\r\n      } else if (this.trackedPointer) {\r\n        this.bounds.centerOn(this.trackedPointer.x, this.trackedPointer.y);\r\n      }\r\n    }\r\n\r\n    if (this.autofire) {\r\n      this.fire();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal update method, called by the Weapon Plugin.\r\n   *\r\n   * @protected\r\n   * @returns {void}\r\n   */\r\n  postRender() {\r\n    if (!this.multiFire || !this._hasFired) {\r\n      return;\r\n    }\r\n\r\n    this._hasFired = false;\r\n\r\n    this._nextFire = this._tempNextFire;\r\n  }\r\n\r\n  /**\r\n   * Destroys this Weapon.\r\n   * You must release everything in here, all references, all objects, free it all up.\r\n   * @returns {void}\r\n   */\r\n  destroy() {\r\n    this.scene = null;\r\n\r\n    this.bullets.destroy(true);\r\n  }\r\n}\r\n\r\n/**\r\n * The Class of the bullets that are launched by this Weapon. Defaults to {@link Phaser.Bullet}, but can be\r\n * overridden before calling `createBullets` and set to your own class type.\r\n *\r\n * It should be a constructor function accepting `(game, x, y, key, frame)`.\r\n *\r\n * @name Weapon#bulletClass\r\n * @property {function} bulletClass\r\n */\r\nObject.defineProperty(Weapon.prototype, 'bulletClass', {\r\n  get() {\r\n    return this._bulletClass;\r\n  },\r\n\r\n  set(classType) {\r\n    this._bulletClass = classType;\r\n\r\n    // `this.bullets` exists only after createBullets()\r\n    if (this.bullets) {\r\n      this.bullets.classType = this._bulletClass;\r\n    }\r\n  },\r\n});\r\n\r\n/**\r\n * This controls how the bullets will be killed. The default is `consts.KILL_WORLD_BOUNDS`.\r\n *\r\n * There are 7 different \"kill types\" available:\r\n *\r\n * * `consts.KILL_NEVER`\r\n * The bullets are never destroyed by the Weapon. It's up to you to destroy them via your own code.\r\n *\r\n * * `consts.KILL_LIFESPAN`\r\n * The bullets are automatically killed when their `bulletLifespan` amount expires.\r\n *\r\n * * `consts.KILL_DISTANCE`\r\n * The bullets are automatically killed when they exceed `bulletDistance` pixels away from their original launch position.\r\n *\r\n * * `consts.KILL_WEAPON_BOUNDS`\r\n * The bullets are automatically killed when they no longer intersect with the {@link #bounds} rectangle.\r\n *\r\n * * `consts.KILL_CAMERA_BOUNDS`\r\n * The bullets are automatically killed when they no longer intersect with the {@link Phaser.Camera#bounds} rectangle.\r\n *\r\n * * `consts.KILL_WORLD_BOUNDS`\r\n * The bullets are automatically killed when they no longer intersect with the {@link Phaser.World#bounds} rectangle.\r\n *\r\n * * `consts.KILL_STATIC_BOUNDS`\r\n * The bullets are automatically killed when they no longer intersect with the {@link #bounds} rectangle.\r\n * The difference between static bounds and weapon bounds, is that a static bounds will never be adjusted to\r\n * match the position of a tracked sprite or pointer.\r\n *\r\n * @name Weapon#bulletKillType\r\n * @property {integer} bulletKillType\r\n */\r\nObject.defineProperty(Weapon.prototype, 'bulletKillType', {\r\n  get() {\r\n    return this._bulletKillType;\r\n  },\r\n\r\n  set(type) {\r\n    switch (type) {\r\n      case consts.KILL_STATIC_BOUNDS:\r\n      case consts.KILL_WEAPON_BOUNDS:\r\n        this.bulletBounds = this.bounds;\r\n        break;\r\n\r\n      case consts.KILL_CAMERA_BOUNDS:\r\n        this.bulletBounds = this.scene.sys.cameras.main._bounds;\r\n        break;\r\n\r\n      case consts.KILL_WORLD_BOUNDS:\r\n        this.bulletBounds = this.scene.physics.world.bounds;\r\n        break;\r\n    }\r\n\r\n    this._bulletKillType = type;\r\n  },\r\n});\r\n\r\n/**\r\n * Should bullets collide with the World bounds or not?\r\n *\r\n * @name Weapon#bulletCollideWorldBounds\r\n * @property {boolean} bulletCollideWorldBounds\r\n */\r\nObject.defineProperty(Weapon.prototype, 'bulletCollideWorldBounds', {\r\n  get() {\r\n    return this._bulletCollideWorldBounds;\r\n  },\r\n\r\n  set(value) {\r\n    this._bulletCollideWorldBounds = value;\r\n\r\n    this.bullets.children.each(child => {\r\n      child.body.collideWorldBounds = value;\r\n      child.data.bodyDirty = false;\r\n    });\r\n  },\r\n});\r\n\r\n/**\r\n * The x coordinate from which bullets are fired. This is the same as `Weapon.fireFrom.x`, and\r\n * can be overridden by the {@link #fire} arguments.\r\n *\r\n * @name Weapon#x\r\n * @property {number} x\r\n */\r\nObject.defineProperty(Weapon.prototype, 'x', {\r\n  get() {\r\n    return this.fireFrom.x;\r\n  },\r\n\r\n  set(value) {\r\n    this.fireFrom.x = value;\r\n  },\r\n});\r\n\r\n/**\r\n * The y coordinate from which bullets are fired. This is the same as `Weapon.fireFrom.y`, and\r\n * can be overridden by the {@link #fire} arguments.\r\n *\r\n * @name Weapon#y\r\n * @property {number} y\r\n */\r\nObject.defineProperty(Weapon.prototype, 'y', {\r\n  get() {\r\n    return this.fireFrom.y;\r\n  },\r\n\r\n  set(value) {\r\n    this.fireFrom.y = value;\r\n  },\r\n});\r\n\r\nmodule.exports = Weapon;\r\n\n\n\n// WEBPACK FOOTER //\n// ./Weapon.js"],"sourceRoot":""}